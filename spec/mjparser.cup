package mj_compiler;

import java_cup.runtime.*;
import rs.etf.pp1.mj.runtime.Code;
import org.apache.log4j.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import utils.*;

// import java.io.*;


parser code {:	
    ParserActionImplementer impl = new ParserActionImplementer() ;	
    int printCallCount = 0;
    boolean errorDetected = false;

    Logger log = Logger.getLogger(getClass());
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      impl.reportError(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        impl.reportError("\nSyntax error : ", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        impl.reportFatalError("Error : parsing has to be stopped", cur_token);
    }
:}


action code {:
    ParserActionImplementer impl = new ParserActionImplementer() ;	
:}


init with {:
  Tab.init(); 
:}


scan with {:
    Symbol s = this.getScanner().next_token();
    if (s != null && s.value != null) 
            log.info(s.toString() + " " + s.value.toString());
    return s;
:}

terminal     PROG, STATIC, CONTINUE, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, COMMA, PRINT, RETURN, VOID, LBRACK, RBRACK, READ, BREAK;
terminal     IF, ELSE;
terminal     CLASS, EXTENDS, CONST;
terminal     Character CHAR;
terminal     Boolean BOOL;
terminal     Integer NUMBER ;
terminal     String IDENT ;
terminal     INC, DEC, FOR, OR, AND, NEQ, GT, GEQ, LT, LEQ, DOT, NEW, EQ;
terminal     ASSIGN, ASSIGNPLUS, ASSIGNMINUS, ASSIGNMUL, ASSIGNDIV, ASSIGNMOD ;
terminal     ADD, SUB, MUL, DIV, MOD;
non terminal Program, ProgramName, GlobalParameterList, MethodList ;
non terminal GlobalParameterType ;
non terminal ConstDecl, ConstList, Constant, ConstType ;
non terminal GlobalVarDecl, GlobalVarList, GlobalVar ; 
non terminal ClassDecl, ClassExtended, ClassMethodListOptional, ClassMethodDecl, ClassMethodStatic, ClassMethodReturnType, ClassFormPars, ClassMethodVarDeclList ;
non terminal ClassStatementList, ClassFormalParamList, ClassFormalParamDecl, ClassMethodVarDecl, ClassMethodVarList ;
non terminal ClassMethodVar, ClassVarDeclList, ClassVarDecl, ClassMethodList, ClassVarList, ClassVar ;
non terminal MethodDecl, MethodReturnType, FormPars, MethodVarDeclList, MethodVarListAdditional, MethodVarDecl, MethodVarList, MethodVar, FormalParamList, FormalParamDecl;
non terminal StatementList, Statement, StatementMatched, StatementUnmatched, ForStatement, ReadStatement, PrintStatement, ReturnStatement;
non terminal DesignatorStatement, DesignatorAssign, ActPars ;
non terminal ForStatementDesignatorExtension, ForStatementConditionExtension ;
non terminal IfStatement, IfCondition ;
non terminal Integer Addop, Mulop, Assignop, Relop, AddopLeft, AddopRight, MulopLeft, MulopRight ;  
non terminal Obj Designator, Term, Factor, TermList, DesignatorExtension ;
non terminal Struct Type, Expr, ConditionFact, Condition, ConditionTerm ;


precedence left ELSE;



//GLOBAL -----------------------------------------------------------------------
//------------------------------------------------------------------------------
Program ::=     PROG ProgramName:pName GlobalParameterList LBRACE MethodList RBRACE {: impl.programEnd(); :};


ProgramName ::= IDENT:progName {: RESULT = Tab.insert(Obj.Prog, progName.toString(), Tab.noType); impl.programStart(progName); :} ;


GlobalParameterList ::= 
                GlobalParameterList GlobalParameterType 
        |       /* epsilon */ ;


GlobalParameterType ::=    
                ConstDecl
        |       GlobalVarDecl 
        |       ClassDecl ;
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------



//CONSTANT ---------------------------------------------------------------------
//------------------------------------------------------------------------------
ConstDecl ::=   CONST Type:type {: impl.currentConstType = type; :} ConstList SEMI ;


ConstList ::=   Constant
        |       ConstList COMMA Constant 
        |       error:err {: impl.reportError("Successful error recovery on line ", errleft); :} ;


Constant ::=    IDENT:constName ASSIGN ConstType:constValue {: impl.addConst(constName, constValue, constNameleft); :} ;


ConstType ::=   
                NUMBER:number {: RESULT = number; :}
        |       CHAR:c {: RESULT = c; :}
        |       BOOL:bool {: RESULT = bool; :} ;
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------



//VARIABLE ---------------------------------------------------------------------
//------------------------------------------------------------------------------
GlobalVarDecl ::=     
                Type:varType {: impl.currentVarType = varType; :} GlobalVarList SEMI 
        |       error:err SEMI {: impl.reportInfo("Successful error recovery. Line ", errleft); :} ;

GlobalVarList ::=     
                GlobalVar COMMA GlobalVarList 
        |       GlobalVar
        |       error COMMA GlobalVarList:globalVarList {: impl.reportInfo("Successful error recovery. Line ", globalVarListleft); :} 
        |       error:err {: impl.reportInfo("Successful error recovery. Line", errleft); :} ;


GlobalVar ::=   IDENT:varName {: impl.addVar(varName, varNameleft, SymbolOrigin.GLOBAL, false); :} 
        |       IDENT:varName LBRACK RBRACK {: impl.addVar(varName, varNameleft, SymbolOrigin.GLOBAL, true); :} ;


Type ::=        IDENT:typeName {: RESULT = impl.resolveType(typeName, typeNameleft); :} ;
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------



//CLASS ------------------------------------------------------------------------
//------------------------------------------------------------------------------
ClassDecl ::=   CLASS IDENT:className ClassExtended:classExtended {: impl.classStart(className, classExtendedleft); :} LBRACE ClassVarDeclList ClassMethodListOptional RBRACE {: impl.classEnd(); :};


ClassExtended ::=   
                EXTENDS Type:parent {: impl.currentClassParent = parent; :} 
        |       /* epsilon */ {: impl.currentClassParent = null; :} ;


ClassVarDeclList ::=
                ClassVarDecl ClassVarDeclList
        |       /* epsilon */ ;

				  
ClassVarDecl ::=    
                Type:classVarType {: impl.currentVarType = classVarType; :} ClassVarList SEMI ;


ClassVarList ::=   
                ClassVar COMMA ClassVarList 
        |       ClassVar 
        |       error:err SEMI {: impl.reportInfo("Successful error recovery. Line ", errleft); :}
        |       error:err LBRACE {: impl.reportInfo("Successful error recovery. Line ", errleft); :} ;


ClassVar ::=    IDENT:classVarName {: impl.addVar(classVarName, classVarNameleft, SymbolOrigin.LOCAL, false); :}
        |       IDENT:classVarName LBRACK RBRACK {: impl.addVar(classVarName, classVarNameleft, SymbolOrigin.LOCAL, true); :};
	
			 
ClassMethodListOptional ::= 
                LBRACE ClassMethodList RBRACE 
        |       /* epsilon */ ;


ClassMethodList ::=  
                ClassMethodList ClassMethodDecl 
        |       /* epsilon */ ;

					
ClassMethodDecl ::=  
                ClassMethodStatic ClassMethodReturnType LPAREN ClassFormPars RPAREN ClassMethodVarDeclList LBRACE {: impl.addMethod(); :} ClassStatementList RBRACE {: impl.methodEnd(); :};


ClassMethodStatic ::=    
                STATIC 
        |       /* epsilon */ ;


ClassMethodReturnType ::=    
                Type:type IDENT:methodName {: impl.currentMethodName=methodName; impl.currentMethodType = type; impl.currentMethodNameLine=methodNameleft;  :}
        |       VOID IDENT:methodName {: impl.currentMethodName=methodName; impl.currentMethodType = null; impl.currentMethodNameLine=methodNameleft;  :} ;


ClassFormPars ::=    
                ClassFormalParamList
        |       /* epsilon */ ;


ClassFormalParamList ::= 
                ClassFormalParamDecl COMMA ClassFormalParamList 
        |       ClassFormalParamDecl ;
	
				
ClassFormalParamDecl ::= 
                Type:type IDENT:varName {: impl.currentVarType = type; impl.addVar(varName, varNameleft, SymbolOrigin.UNIMPORTANT, false); :}
        |       Type:type IDENT:varName LBRACK RBRACK {: impl.currentVarType = type; impl.addVar(varName, varNameleft, SymbolOrigin.UNIMPORTANT, true); :} ;


ClassMethodVarDeclList ::=   
                ClassMethodVarDecl SEMI ClassMethodVarDeclList
        |       error:err SEMI {: impl.reportInfo("Successful error recovery on line ", errleft); :} 
        |       error:err {: impl.reportInfo("Successful error recovery on line ", errleft); :} 
        |       /* epsilon */ ;


ClassMethodVarDecl ::=     
                Type:type {: impl.currentVarType = type; :} ClassMethodVarList ;


ClassMethodVarList ::= 
                ClassMethodVar COMMA ClassMethodVarList
        |       error:err {: impl.reportInfo("Successful error recovery. Line ", errleft); :}
        |       error COMMA ClassMethodVarList:classMethodVarList {: impl.reportInfo("Successful error recovery. Line ", classMethodVarListleft); :} 
        |       /* epsilon */ ;


ClassMethodVar ::=   
                IDENT:varName {: impl.addVar(varName, varNameleft, SymbolOrigin.UNIMPORTANT, false); :}   
        |       IDENT :varName LBRACK RBRACK {: impl.addVar(varName, varNameleft, SymbolOrigin.UNIMPORTANT, true); :} ;


ClassStatementList ::= 
                StatementList ;
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------



//METHOD -----------------------------------------------------------------------
//------------------------------------------------------------------------------
MethodList ::=  MethodList MethodDecl 
        |       /* epsilon */ ;


MethodDecl ::=  MethodReturnType:methodReturnType LPAREN FormPars RPAREN MethodVarDeclList LBRACE {: impl.methodStart(); :} StatementList RBRACE {: impl.methodEnd(); :};


MethodReturnType ::=    
                Type:type IDENT:methodName {: impl.currentMethodName=methodName; impl.currentMethodType = type; impl.currentMethodNameLine=methodNameleft; impl.addMethod(); :}
        |       VOID IDENT:methodName {: impl.currentMethodName=methodName; impl.currentMethodType = null; impl.currentMethodNameLine=methodNameleft;  impl.addMethod(); :} ;


FormPars ::=    FormalParamList
        |       /* epsilon */ ;


FormalParamList ::= 
                FormalParamDecl COMMA FormalParamList 
        |       FormalParamDecl ;
	
				
FormalParamDecl ::= 
                Type:type IDENT:name {: impl.currentVarType = type; impl.addVar(name, nameleft, SymbolOrigin.UNIMPORTANT, false); :}
        |       Type:type IDENT:name LBRACK RBRACK {: impl.currentVarType = type; impl.addVar(name, nameleft, SymbolOrigin.UNIMPORTANT, true); :};


MethodVarDeclList ::=   
                MethodVarDecl SEMI MethodVarDeclList
        |       error:err SEMI {: impl.reportInfo("Successful error recovery on line ", errleft); :} 
        |       error:err {: impl.reportInfo("Successful error recovery on line ", errleft); :} 
        |       /* epsilon */ ;


MethodVarDecl ::=     
                Type:methodVarType {: impl.currentVarType = methodVarType; :} MethodVarList ;


MethodVarList ::= 
                MethodVar MethodVarListAdditional ;
                

MethodVarListAdditional ::= 
                MethodVarListAdditional COMMA MethodVar
        |       error:err {: impl.reportInfo("Successful error recovery. Line ", errleft); :}
        |       MethodVarListAdditional:methodVarListAdditional COMMA error {: impl.reportInfo("Successful error recovery. Line ", methodVarListAdditionalleft); :} 
        |       /* epsilon */ ;


MethodVar ::=   IDENT:varName  {: impl.addVar(varName, varNameleft, SymbolOrigin.LOCAL, false); :} 
        |       IDENT:varName LBRACK RBRACK {: impl.addVar(varName, varNameleft, SymbolOrigin.LOCAL, true); :} ;
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------



//STATEMENT --------------------------------------------------------------------
//------------------------------------------------------------------------------
StatementList ::=   
                StatementList Statement 
        |       /* epsilon */ ;


Statement ::=   StatementMatched 
        |       StatementUnmatched ;
	  

StatementMatched ::=    
                ForStatement 
        |       DesignatorStatement SEMI    
        |       PrintStatement SEMI 
        |       ReturnStatement SEMI 
        |       ReadStatement:readStatement SEMI 
        |       CONTINUE:cont SEMI {: impl.statementCheckContinue(contleft); :}
        |       BREAK:brk SEMI {: impl.statementCheckBreak(brkleft); :} ;


StatementUnmatched ::=  
                IfStatement 
        |       LBRACE StatementList RBRACE ;
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------



//DESIGNATOR STATEMENT ---------------------------------------------------------
//------------------------------------------------------------------------------
DesignatorStatement ::= 
                DesignatorAssign
        |       Designator:des LPAREN RPAREN {: RESULT = impl.designatorCallMethod(des, null, desleft); :}
        |       Designator:des LPAREN ActPars RPAREN {: :}
        |       Designator:des INC:inc {: RESULT = impl.designatorInc(des, desleft); :}
        |       Designator:des DEC:dec {: RESULT = impl.designatorDec(des, desleft); :} ;


DesignatorAssign ::=
                Designator:des {: impl.inAssign = true; :} Assignop:op Expr:expr {: RESULT = impl.assign(des, op, expr, desleft); impl.inAssign = false; :} 
        |       error:err {: impl.reportInfo("Successful error recovery. Line ", errleft); :} ;


Designator ::=  
                IDENT:ident {: impl.setDesignatorArrayExtension(ident, identleft); :} DesignatorExtension:designatorExtension {: RESULT = impl.designatorResolveIdentificator(ident, designatorExtension, identleft); :};


DesignatorExtension ::= 
                DesignatorExtension DOT IDENT 
        |       DesignatorExtension LBRACK:lbrack {: RESULT = impl.designatorExtensionResolveArray(lbrackleft); :} Expr:expr {: impl.checkIfInt(expr, exprleft); :} RBRACK 
        |       /* epsilon */ ;


ActPars ::=     Expr:expr {: RESULT = expr; :}
        |       Expr COMMA ActPars ;
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------



//PRINT STATEMENT --------------------------------------------------------------
//------------------------------------------------------------------------------
PrintStatement ::= 
                PRINT LPAREN Expr:expr RPAREN {: impl.statementCheckPrint(expr, 1, exprleft); :}
        |       PRINT LPAREN Expr:expr COMMA NUMBER:num RPAREN {: impl.statementCheckPrint(expr, num, exprleft); :} ;
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------



//RETURN STATEMENT -------------------------------------------------------------
//------------------------------------------------------------------------------
ReturnStatement ::= 
                RETURN {: impl.markReturn(); :}
        |       RETURN Expr:expr {: impl.markReturn(); :} ;
//------------------------------------------------------------------------------		   
//------------------------------------------------------------------------------



//READ STATEMENT ---------------------------------------------------------------
//------------------------------------------------------------------------------
ReadStatement ::= 
                READ LPAREN Designator:des RPAREN {: impl.statementCheckRead(des, desleft); :} ;
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------



//FOR STATEMENT ----------------------------------------------------------------
//------------------------------------------------------------------------------
ForStatement ::= 
                FOR LPAREN ForStatementDesignatorExtension SEMI ForStatementConditionExtension SEMI ForStatementDesignatorExtension RPAREN {: impl.forLoopStart(); :} Statement {: impl.forLoopEnd(); :} ;


ForStatementDesignatorExtension ::= 
                DesignatorStatement 
        |       /* epsilon */ ;


ForStatementConditionExtension ::=  
                Condition:condition {: impl.statementCheckForCondition(condition, conditionleft); :}
        |       /* epsilon */ ;
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------



//IF ELSE STATEMENT ------------------------------------------------------------
//------------------------------------------------------------------------------
IfStatement ::=     
                IfCondition:ifCondition StatementMatched:ifStatement ELSE StatementUnmatched:elseStatement 
        |       IfCondition:ifCondition Statement:ifStatement ;


IfCondition ::= IF LPAREN Condition:condition RPAREN {: impl.statementCheckIfCondition(condition, conditionleft); :};


Condition ::=       
                ConditionTerm:conditionTerm {: RESULT = conditionTerm; :}
        |       ConditionTerm OR Condition ;

 			   
ConditionTerm ::=   
                ConditionFact:conditionFact {: RESULT = conditionFact; :}
        |       ConditionFact AND ConditionTerm ;
 		
		   
ConditionFact ::=   
                Expr:expr {: RESULT = expr; :}
        |       Expr:expr1 Relop:relop Expr:expr2 {: RESULT = impl.compareTypes(expr1, expr2, expr1left); :};
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------



//EXPR -------------------------------------------------------------------------
//------------------------------------------------------------------------------			  
Expr ::=        TermList:termList {: RESULT = termList.getType(); impl.factorComesFromDesignator = false; :}
        |       SUB TermList:termList {: RESULT = termList.getType(); Code.put(Code.neg); impl.factorComesFromDesignator = false; :} ;
		 
	 
TermList ::=    Term:term {: RESULT = term; impl.termListCheckTermForArray(term); :}
        |       Term:term Addop:addop {: impl.addOpOccured++; :} TermList:termList {: RESULT = impl.add(term, addop, termList, termleft); :};		 


Term ::=        Factor:factor {: RESULT = factor; impl.termCheckFactorForArray(factor); :} 
        |       Factor:factor Mulop:mulop {: impl.mulOpOccured++; :} Term:term {: RESULT = impl.mul(factor, mulop, term, termleft); :} ;


Factor ::=       
                Designator:des {: RESULT = impl.factorNewDesignator(des, desleft); :}
        |       Designator:des LPAREN RPAREN {: RESULT = impl.factorNewMethod(des, desleft); :}
        |       Designator:des LPAREN ActPars:params RPAREN {: RESULT = impl.factorNewMethod(des, desleft); :}
        |       NUMBER:num {: RESULT = impl.factorNewNumber(num, numleft); :}
        |       CHAR:c {: RESULT = impl.factorNewChar(c,cleft); :}
        |       BOOL:bool {: RESULT = impl.factorNewBool(bool,boolleft); :}
        |       LPAREN Expr:expr RPAREN {: RESULT = impl.factorNewExpr(expr, exprleft); :}
        |       NEW Type:type LBRACK Expr:expr RBRACK  {: RESULT = impl.factorNewArray(type, expr, typeleft); :}
        |       NEW Type:type {: :} ; //neterminal mora da oznacava unutrasnju klasu
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------



//OPERATION --------------------------------------------------------------------
//------------------------------------------------------------------------------
Relop ::=       EQ {: RESULT = new Integer(Code.eq); :}
        |       NEQ {: RESULT = new Integer(Code.ne); :}
        |       GT {: RESULT = new Integer(Code.gt); :}
        |       GEQ {: RESULT = new Integer(Code.ge); :} 
        |       LT {: RESULT = new Integer(Code.lt); :}
        |       LEQ {: RESULT = new Integer(Code.le); :} ; 


Assignop ::=    ASSIGN {: RESULT = new Integer(0); :}
        |       AddopRight:addopLeft {: RESULT = addopLeft; :}
        |       MulopRight:addopRight {: RESULT = addopRight; :};


Addop ::=       AddopLeft:addopLeft {: RESULT = addopLeft; :} 
        |       AddopRight:addopRight {: RESULT = addopRight; :} ;


AddopLeft ::=   ADD {: RESULT = new Integer(Code.add); :}
        |       SUB {: RESULT = new Integer(Code.sub); :} ;


AddopRight ::=  ASSIGNPLUS {: RESULT = new Integer(100+Code.add); :}
        |       ASSIGNMINUS {: RESULT = new Integer(100+Code.sub); :} ;


Mulop ::=       MulopLeft:mulopLeft {: RESULT = mulopLeft; :}
        |       MulopRight:mulopRight {: RESULT = mulopRight; :};


MulopLeft ::=   MUL {: RESULT = new Integer(Code.mul); :}
        |       DIV {: RESULT = new Integer(Code.div); :}
        |       MOD {: RESULT = new Integer(Code.rem); :} ;


MulopRight ::=  ASSIGNMUL {: RESULT = new Integer(100+Code.mul); :}
        |       ASSIGNDIV {: RESULT = new Integer(100+Code.div); :}
        |       ASSIGNMOD {: RESULT = new Integer(100+Code.rem); :} ;
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------