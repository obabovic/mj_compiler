
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jan 20 23:31:02 CET 2017
//----------------------------------------------------

package mj_compiler;

import java_cup.runtime.*;
import rs.etf.pp1.mj.runtime.Code;
import org.apache.log4j.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import utils.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jan 20 23:31:02 CET 2017
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\301\000\002\002\010\000\002\002\004\000\002\003" +
    "\003\000\002\004\004\000\002\004\002\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\122\002\000" +
    "\002\007\007\000\002\010\003\000\002\010\005\000\002" +
    "\010\003\000\002\011\005\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\123\002\000\002\013\006" +
    "\000\002\013\004\000\002\014\005\000\002\014\003\000" +
    "\002\014\005\000\002\014\003\000\002\015\003\000\002" +
    "\016\003\000\002\016\005\000\002\115\003\000\002\124" +
    "\002\000\002\017\012\000\002\020\004\000\002\020\002" +
    "\000\002\036\004\000\002\036\002\000\002\125\002\000" +
    "\002\037\006\000\002\041\005\000\002\041\003\000\002" +
    "\041\003\000\002\027\004\000\002\027\004\000\002\042" +
    "\003\000\002\042\005\000\002\021\005\000\002\021\002" +
    "\000\002\040\004\000\002\040\002\000\002\126\002\000" +
    "\002\022\014\000\002\023\003\000\002\023\002\000\002" +
    "\024\004\000\002\024\004\000\002\025\003\000\002\025" +
    "\002\000\002\031\005\000\002\031\003\000\002\032\004" +
    "\000\002\032\006\000\002\026\005\000\002\026\004\000" +
    "\002\026\003\000\002\026\002\000\002\127\002\000\002" +
    "\033\005\000\002\034\005\000\002\034\003\000\002\034" +
    "\005\000\002\034\002\000\002\035\003\000\002\035\005" +
    "\000\002\030\003\000\002\005\004\000\002\005\002\000" +
    "\002\130\002\000\002\043\013\000\002\045\004\000\002" +
    "\045\004\000\002\046\003\000\002\046\002\000\002\055" +
    "\005\000\002\055\003\000\002\056\004\000\002\056\006" +
    "\000\002\047\005\000\002\047\003\000\002\047\002\000" +
    "\002\044\004\000\002\044\003\000\002\131\002\000\002" +
    "\052\005\000\002\053\004\000\002\050\005\000\002\050" +
    "\005\000\002\050\003\000\002\050\002\000\002\051\003" +
    "\000\002\054\003\000\002\054\005\000\002\057\004\000" +
    "\002\057\002\000\002\060\003\000\002\060\003\000\002" +
    "\061\003\000\002\061\004\000\002\061\004\000\002\061" +
    "\004\000\002\061\004\000\002\061\004\000\002\061\004" +
    "\000\002\062\003\000\002\062\005\000\002\067\003\000" +
    "\002\067\005\000\002\067\006\000\002\067\004\000\002" +
    "\067\004\000\002\132\002\000\002\070\006\000\002\070" +
    "\003\000\002\071\003\000\002\133\002\000\002\107\005" +
    "\000\002\113\005\000\002\134\002\000\002\135\002\000" +
    "\002\113\010\000\002\113\002\000\002\072\003\000\002" +
    "\072\005\000\002\065\006\000\002\065\010\000\002\066" +
    "\003\000\002\066\004\000\002\064\006\000\002\136\002" +
    "\000\002\063\014\000\002\073\003\000\002\073\002\000" +
    "\002\074\003\000\002\074\002\000\002\075\006\000\002" +
    "\075\004\000\002\076\006\000\002\120\003\000\002\120" +
    "\005\000\002\121\003\000\002\121\005\000\002\117\003" +
    "\000\002\117\005\000\002\116\003\000\002\116\004\000" +
    "\002\114\003\000\002\137\002\000\002\114\006\000\002" +
    "\140\002\000\002\114\006\000\002\112\003\000\002\141" +
    "\002\000\002\142\002\000\002\112\007\000\002\110\003" +
    "\000\002\143\002\000\002\144\002\000\002\110\007\000" +
    "\002\111\003\000\002\111\005\000\002\111\006\000\002" +
    "\111\003\000\002\111\003\000\002\111\003\000\002\111" +
    "\005\000\002\111\007\000\002\111\004\000\002\102\003" +
    "\000\002\102\003\000\002\102\003\000\002\102\003\000" +
    "\002\102\003\000\002\102\003\000\002\101\003\000\002" +
    "\101\003\000\002\101\003\000\002\103\003\000\002\103" +
    "\003\000\002\104\003\000\002\104\003\000\002\105\003" +
    "\000\002\105\003\000\002\105\003\000\002\106\003\000" +
    "\002\106\003\000\002\106\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012e\000\004\004\005\001\002\000\004\002\u0130\001" +
    "\002\000\004\034\007\001\002\000\014\003\ufffd\007\ufffd" +
    "\026\ufffd\030\ufffd\034\ufffd\001\002\000\014\003\uffff\007" +
    "\uffff\026\uffff\030\uffff\034\uffff\001\002\000\014\003\017" +
    "\007\012\026\021\030\022\034\013\001\002\000\006\003" +
    "\ufff0\034\ufff0\001\002\000\010\010\uffb8\017\uffb8\034\uffb8" +
    "\001\002\000\066\003\uffe6\007\uffe6\011\uffe6\013\uffe6\014" +
    "\uffe6\020\uffe6\021\uffe6\034\uffe6\040\uffe6\041\uffe6\042\uffe6" +
    "\043\uffe6\044\uffe6\045\uffe6\046\uffe6\051\uffe6\053\uffe6\054" +
    "\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6" +
    "\063\uffe6\064\uffe6\001\002\000\014\003\ufffe\007\ufffe\026" +
    "\ufffe\030\ufffe\034\ufffe\001\002\000\014\003\ufffb\007\ufffb" +
    "\026\ufffb\030\ufffb\034\ufffb\001\002\000\014\003\ufffa\007" +
    "\ufffa\026\ufffa\030\ufffa\034\ufffa\001\002\000\004\011\367" +
    "\001\002\000\014\003\ufffc\007\ufffc\026\ufffc\030\ufffc\034" +
    "\ufffc\001\002\000\004\034\041\001\002\000\004\034\013" +
    "\001\002\000\006\003\ufff9\034\ufff9\001\002\000\006\003" +
    "\025\034\030\001\002\000\006\011\ufff5\014\ufff5\001\002" +
    "\000\006\011\ufff7\014\ufff7\001\002\000\006\011\037\014" +
    "\036\001\002\000\004\052\031\001\002\000\010\031\035" +
    "\032\034\033\032\001\002\000\006\011\ufff3\014\ufff3\001" +
    "\002\000\006\011\ufff4\014\ufff4\001\002\000\006\011\ufff1" +
    "\014\ufff1\001\002\000\006\011\ufff2\014\ufff2\001\002\000" +
    "\004\034\030\001\002\000\014\003\ufff8\007\ufff8\026\ufff8" +
    "\030\ufff8\034\ufff8\001\002\000\006\011\ufff6\014\ufff6\001" +
    "\002\000\006\007\uffe2\027\042\001\002\000\004\034\013" +
    "\001\002\000\004\007\uffe5\001\002\000\004\007\045\001" +
    "\002\000\010\007\uffe0\010\uffe0\034\013\001\002\000\006" +
    "\007\067\010\uffd5\001\002\000\006\003\uffdf\034\uffdf\001" +
    "\002\000\010\007\uffe0\010\uffe0\034\013\001\002\000\006" +
    "\007\uffe1\010\uffe1\001\002\000\006\003\054\034\055\001" +
    "\002\000\006\011\uffdc\014\065\001\002\000\006\007\063" +
    "\011\064\001\002\000\010\011\uffd8\014\uffd8\020\061\001" +
    "\002\000\004\011\uffdb\001\002\000\004\011\060\001\002" +
    "\000\010\007\uffde\010\uffde\034\uffde\001\002\000\004\021" +
    "\062\001\002\000\006\011\uffd7\014\uffd7\001\002\000\004" +
    "\011\uffd9\001\002\000\004\011\uffda\001\002\000\006\003" +
    "\054\034\055\001\002\000\004\011\uffdd\001\002\000\012" +
    "\005\uffd3\010\uffd3\017\uffd3\034\uffd3\001\002\000\004\010" +
    "\071\001\002\000\014\003\uffe4\007\uffe4\026\uffe4\030\uffe4" +
    "\034\uffe4\001\002\000\012\005\075\010\076\017\uffcf\034" +
    "\uffcf\001\002\000\012\005\uffd4\010\uffd4\017\uffd4\034\uffd4" +
    "\001\002\000\006\017\101\034\013\001\002\000\006\017" +
    "\uffd0\034\uffd0\001\002\000\004\010\uffd6\001\002\000\004" +
    "\034\365\001\002\000\004\012\103\001\002\000\004\034" +
    "\102\001\002\000\004\012\uffcd\001\002\000\006\013\uffcb" +
    "\034\013\001\002\000\006\013\uffc9\014\363\001\002\000" +
    "\004\034\360\001\002\000\004\013\uffcc\001\002\000\004" +
    "\013\110\001\002\000\010\003\112\007\uffc3\034\013\001" +
    "\002\000\010\003\uffc2\011\uffc2\034\uffc2\001\002\000\006" +
    "\007\uffc4\011\344\001\002\000\004\007\117\001\002\000" +
    "\004\011\115\001\002\000\010\003\112\007\uffc3\034\013" +
    "\001\002\000\004\007\uffc6\001\002\000\030\003\uffd2\006" +
    "\uffd2\007\uffd2\010\uffd2\015\uffd2\016\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\034\uffd2\037\uffd2\001\002\000\030\003\uff9d\006" +
    "\uff9d\007\uff9d\010\uff9d\015\uff9d\016\uff9d\022\uff9d\023\uff9d" +
    "\024\uff9d\034\uff9d\037\uff9d\001\002\000\004\010\343\001" +
    "\002\000\030\003\144\006\126\007\137\010\uffba\015\143" +
    "\016\134\022\125\023\142\024\136\034\127\037\150\001" +
    "\002\000\024\012\332\035\327\036\331\052\uff8c\053\uff8c" +
    "\054\uff8c\055\uff8c\056\uff8c\057\uff8c\001\002\000\032\003" +
    "\uff9b\006\uff9b\007\uff9b\010\uff9b\015\uff9b\016\uff9b\022\uff9b" +
    "\023\uff9b\024\uff9b\025\uff9b\034\uff9b\037\uff9b\001\002\000" +
    "\004\012\324\001\002\000\004\011\323\001\002\000\072" +
    "\011\uff88\012\uff88\013\uff88\014\uff88\020\uff88\021\uff88\035" +
    "\uff88\036\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88" +
    "\045\uff88\046\uff88\047\uff88\051\uff88\052\uff88\053\uff88\054" +
    "\uff88\055\uff88\056\uff88\057\uff88\060\uff88\061\uff88\062\uff88" +
    "\063\uff88\064\uff88\001\002\000\004\011\311\001\002\000" +
    "\004\011\310\001\002\000\004\011\307\001\002\000\032" +
    "\003\uff9c\006\uff9c\007\uff9c\010\uff9c\015\uff9c\016\uff9c\022" +
    "\uff9c\023\uff9c\024\uff9c\025\uff9c\034\uff9c\037\uff9c\001\002" +
    "\000\022\011\uff7d\012\174\031\175\032\157\033\164\034" +
    "\127\050\160\061\167\001\002\000\032\003\uff93\006\uff93" +
    "\007\uff93\010\uff93\015\uff93\016\uff93\022\uff93\023\uff93\024" +
    "\uff93\025\uff93\034\uff93\037\uff93\001\002\000\004\012\303" +
    "\001\002\000\030\003\uff9d\006\uff9d\007\uff9d\010\uff9d\015" +
    "\uff9d\016\uff9d\022\uff9d\023\uff9d\024\uff9d\034\uff9d\037\uff9d" +
    "\001\002\000\032\003\uff9a\006\uff9a\007\uff9a\010\uff9a\015" +
    "\uff9a\016\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\034\uff9a" +
    "\037\uff9a\001\002\000\026\003\144\006\126\007\137\015" +
    "\143\016\134\022\125\023\142\024\136\034\127\037\150" +
    "\001\002\000\004\011\274\001\002\000\004\012\266\001" +
    "\002\000\006\011\uff89\013\uff89\001\002\000\030\003\uff9e" +
    "\006\uff9e\007\uff9e\010\uff9e\015\uff9e\016\uff9e\022\uff9e\023" +
    "\uff9e\024\uff9e\034\uff9e\037\uff9e\001\002\000\006\011\uff8a" +
    "\013\uff8a\001\002\000\004\011\265\001\002\000\004\012" +
    "\152\001\002\000\006\011\uff91\013\uff91\001\002\000\010" +
    "\003\144\011\uff77\034\127\001\002\000\006\011\uff78\013" +
    "\uff78\001\002\000\004\011\155\001\002\000\022\011\uff75" +
    "\012\174\031\175\032\157\033\164\034\127\050\160\061" +
    "\167\001\002\000\010\011\uff71\013\uff71\040\263\001\002" +
    "\000\056\011\uff57\013\uff57\014\uff57\021\uff57\040\uff57\041" +
    "\uff57\042\uff57\043\uff57\044\uff57\045\uff57\046\uff57\051\uff57" +
    "\053\uff57\054\uff57\055\uff57\056\uff57\057\uff57\060\uff57\061" +
    "\uff57\062\uff57\063\uff57\064\uff57\001\002\000\004\034\013" +
    "\001\002\000\026\011\uff6d\013\uff6d\040\uff6d\041\uff6d\042" +
    "\254\043\251\044\252\045\250\046\253\051\247\001\002" +
    "\000\050\011\uff69\013\uff69\014\uff69\021\uff69\040\uff69\041" +
    "\uff69\042\uff69\043\uff69\044\uff69\045\uff69\046\uff69\051\uff69" +
    "\053\226\054\235\055\233\056\234\057\230\060\uff63\061" +
    "\uff63\001\002\000\060\011\uff5c\012\217\013\uff5c\014\uff5c" +
    "\021\uff5c\040\uff5c\041\uff5c\042\uff5c\043\uff5c\044\uff5c\045" +
    "\uff5c\046\uff5c\051\uff5c\053\uff5c\054\uff5c\055\uff5c\056\uff5c" +
    "\057\uff5c\060\uff5c\061\uff5c\062\uff5c\063\uff5c\064\uff5c\001" +
    "\002\000\056\011\uff59\013\uff59\014\uff59\021\uff59\040\uff59" +
    "\041\uff59\042\uff59\043\uff59\044\uff59\045\uff59\046\uff59\051" +
    "\uff59\053\uff59\054\uff59\055\uff59\056\uff59\057\uff59\060\uff59" +
    "\061\uff59\062\uff59\063\uff59\064\uff59\001\002\000\004\011" +
    "\212\001\002\000\004\011\uff76\001\002\000\016\012\174" +
    "\031\175\032\157\033\164\034\127\050\160\001\002\000" +
    "\032\011\uff6b\013\uff6b\014\uff6b\021\uff6b\040\uff6b\041\uff6b" +
    "\042\uff6b\043\uff6b\044\uff6b\045\uff6b\046\uff6b\051\uff6b\001" +
    "\002\000\056\011\uff64\013\uff64\014\uff64\021\uff64\040\uff64" +
    "\041\uff64\042\uff64\043\uff64\044\uff64\045\uff64\046\uff64\051" +
    "\uff64\053\uff64\054\uff64\055\uff64\056\uff64\057\uff64\060\uff64" +
    "\061\uff64\062\uff5f\063\uff5f\064\uff5f\001\002\000\056\011" +
    "\uff60\013\uff60\014\uff60\021\uff60\040\uff60\041\uff60\042\uff60" +
    "\043\uff60\044\uff60\045\uff60\046\uff60\051\uff60\053\uff60\054" +
    "\uff60\055\uff60\056\uff60\057\uff60\060\uff60\061\uff60\062\uff60" +
    "\063\uff60\064\uff60\001\002\000\012\011\uff6f\013\uff6f\040" +
    "\uff6f\041\200\001\002\000\020\012\174\031\175\032\157" +
    "\033\164\034\127\050\160\061\167\001\002\000\056\011" +
    "\uff58\013\uff58\014\uff58\021\uff58\040\uff58\041\uff58\042\uff58" +
    "\043\uff58\044\uff58\045\uff58\046\uff58\051\uff58\053\uff58\054" +
    "\uff58\055\uff58\056\uff58\057\uff58\060\uff58\061\uff58\062\uff58" +
    "\063\uff58\064\uff58\001\002\000\004\013\177\001\002\000" +
    "\056\011\uff56\013\uff56\014\uff56\021\uff56\040\uff56\041\uff56" +
    "\042\uff56\043\uff56\044\uff56\045\uff56\046\uff56\051\uff56\053" +
    "\uff56\054\uff56\055\uff56\056\uff56\057\uff56\060\uff56\061\uff56" +
    "\062\uff56\063\uff56\064\uff56\001\002\000\020\012\174\031" +
    "\175\032\157\033\164\034\127\050\160\061\167\001\002" +
    "\000\010\011\uff6e\013\uff6e\040\uff6e\001\002\000\010\062" +
    "\204\063\205\064\203\001\002\000\016\012\uff44\031\uff44" +
    "\032\uff44\033\uff44\034\uff44\050\uff44\001\002\000\016\012" +
    "\uff46\031\uff46\032\uff46\033\uff46\034\uff46\050\uff46\001\002" +
    "\000\016\012\uff45\031\uff45\032\uff45\033\uff45\034\uff45\050" +
    "\uff45\001\002\000\016\012\uff5e\031\uff5e\032\uff5e\033\uff5e" +
    "\034\uff5e\050\uff5e\001\002\000\016\012\174\031\175\032" +
    "\157\033\164\034\127\050\160\001\002\000\056\011\uff5d" +
    "\013\uff5d\014\uff5d\021\uff5d\040\uff5d\041\uff5d\042\uff5d\043" +
    "\uff5d\044\uff5d\045\uff5d\046\uff5d\051\uff5d\053\uff5d\054\uff5d" +
    "\055\uff5d\056\uff5d\057\uff5d\060\uff5d\061\uff5d\062\uff5d\063" +
    "\uff5d\064\uff5d\001\002\000\032\011\uff6a\013\uff6a\014\uff6a" +
    "\021\uff6a\040\uff6a\041\uff6a\042\uff6a\043\uff6a\044\uff6a\045" +
    "\uff6a\046\uff6a\051\uff6a\001\002\000\010\003\144\013\uff77" +
    "\034\127\001\002\000\004\013\214\001\002\000\026\003" +
    "\uff7a\006\uff7a\007\uff7a\015\uff7a\016\uff7a\022\uff7a\023\uff7a" +
    "\024\uff7a\034\uff7a\037\uff7a\001\002\000\026\003\144\006" +
    "\126\007\137\015\143\016\134\022\125\023\142\024\136" +
    "\034\127\037\150\001\002\000\032\003\uff79\006\uff79\007" +
    "\uff79\010\uff79\015\uff79\016\uff79\022\uff79\023\uff79\024\uff79" +
    "\025\uff79\034\uff79\037\uff79\001\002\000\022\012\174\013" +
    "\222\031\175\032\157\033\164\034\127\050\160\061\167" +
    "\001\002\000\004\013\225\001\002\000\006\013\uff81\014" +
    "\223\001\002\000\056\011\uff5b\013\uff5b\014\uff5b\021\uff5b" +
    "\040\uff5b\041\uff5b\042\uff5b\043\uff5b\044\uff5b\045\uff5b\046" +
    "\uff5b\051\uff5b\053\uff5b\054\uff5b\055\uff5b\056\uff5b\057\uff5b" +
    "\060\uff5b\061\uff5b\062\uff5b\063\uff5b\064\uff5b\001\002\000" +
    "\020\012\174\031\175\032\157\033\164\034\127\050\160" +
    "\061\167\001\002\000\004\013\uff80\001\002\000\056\011" +
    "\uff5a\013\uff5a\014\uff5a\021\uff5a\040\uff5a\041\uff5a\042\uff5a" +
    "\043\uff5a\044\uff5a\045\uff5a\046\uff5a\051\uff5a\053\uff5a\054" +
    "\uff5a\055\uff5a\056\uff5a\057\uff5a\060\uff5a\061\uff5a\062\uff5a" +
    "\063\uff5a\064\uff5a\001\002\000\020\012\uff48\031\uff48\032" +
    "\uff48\033\uff48\034\uff48\050\uff48\061\uff48\001\002\000\016" +
    "\012\uff66\031\uff66\032\uff66\033\uff66\034\uff66\050\uff66\001" +
    "\002\000\020\012\uff41\031\uff41\032\uff41\033\uff41\034\uff41" +
    "\050\uff41\061\uff41\001\002\000\006\060\241\061\240\001" +
    "\002\000\016\012\uff68\031\uff68\032\uff68\033\uff68\034\uff68" +
    "\050\uff68\001\002\000\020\012\uff43\031\uff43\032\uff43\033" +
    "\uff43\034\uff43\050\uff43\061\uff43\001\002\000\020\012\uff42" +
    "\031\uff42\032\uff42\033\uff42\034\uff42\050\uff42\061\uff42\001" +
    "\002\000\020\012\uff47\031\uff47\032\uff47\033\uff47\034\uff47" +
    "\050\uff47\061\uff47\001\002\000\016\012\174\031\175\032" +
    "\157\033\164\034\127\050\160\001\002\000\032\011\uff67" +
    "\013\uff67\014\uff67\021\uff67\040\uff67\041\uff67\042\uff67\043" +
    "\uff67\044\uff67\045\uff67\046\uff67\051\uff67\001\002\000\016" +
    "\012\uff49\031\uff49\032\uff49\033\uff49\034\uff49\050\uff49\001" +
    "\002\000\016\012\uff4a\031\uff4a\032\uff4a\033\uff4a\034\uff4a" +
    "\050\uff4a\001\002\000\016\012\uff62\031\uff62\032\uff62\033" +
    "\uff62\034\uff62\050\uff62\001\002\000\016\012\174\031\175" +
    "\032\157\033\164\034\127\050\160\001\002\000\056\011" +
    "\uff61\013\uff61\014\uff61\021\uff61\040\uff61\041\uff61\042\uff61" +
    "\043\uff61\044\uff61\045\uff61\046\uff61\051\uff61\053\uff61\054" +
    "\uff61\055\uff61\056\uff61\057\uff61\060\uff61\061\uff61\062\uff5f" +
    "\063\uff5f\064\uff5f\001\002\000\016\012\174\031\175\032" +
    "\157\033\164\034\127\050\160\001\002\000\032\011\uff65" +
    "\013\uff65\014\uff65\021\uff65\040\uff65\041\uff65\042\uff65\043" +
    "\uff65\044\uff65\045\uff65\046\uff65\051\uff65\001\002\000\020" +
    "\012\uff53\031\uff53\032\uff53\033\uff53\034\uff53\050\uff53\061" +
    "\uff53\001\002\000\020\012\uff4f\031\uff4f\032\uff4f\033\uff4f" +
    "\034\uff4f\050\uff4f\061\uff4f\001\002\000\020\012\uff51\031" +
    "\uff51\032\uff51\033\uff51\034\uff51\050\uff51\061\uff51\001\002" +
    "\000\020\012\uff50\031\uff50\032\uff50\033\uff50\034\uff50\050" +
    "\uff50\061\uff50\001\002\000\020\012\uff4e\031\uff4e\032\uff4e" +
    "\033\uff4e\034\uff4e\050\uff4e\061\uff4e\001\002\000\020\012" +
    "\uff52\031\uff52\032\uff52\033\uff52\034\uff52\050\uff52\061\uff52" +
    "\001\002\000\020\012\174\031\175\032\157\033\164\034" +
    "\127\050\160\061\167\001\002\000\012\011\uff6c\013\uff6c" +
    "\040\uff6c\041\uff6c\001\002\000\060\011\uff54\013\uff54\014" +
    "\uff54\020\260\021\uff54\040\uff54\041\uff54\042\uff54\043\uff54" +
    "\044\uff54\045\uff54\046\uff54\051\uff54\053\uff54\054\uff54\055" +
    "\uff54\056\uff54\057\uff54\060\uff54\061\uff54\062\uff54\063\uff54" +
    "\064\uff54\001\002\000\020\012\174\031\175\032\157\033" +
    "\164\034\127\050\160\061\167\001\002\000\004\021\262" +
    "\001\002\000\056\011\uff55\013\uff55\014\uff55\021\uff55\040" +
    "\uff55\041\uff55\042\uff55\043\uff55\044\uff55\045\uff55\046\uff55" +
    "\051\uff55\053\uff55\054\uff55\055\uff55\056\uff55\057\uff55\060" +
    "\uff55\061\uff55\062\uff55\063\uff55\064\uff55\001\002\000\020" +
    "\012\174\031\175\032\157\033\164\034\127\050\160\061" +
    "\167\001\002\000\006\011\uff70\013\uff70\001\002\000\032" +
    "\003\uff96\006\uff96\007\uff96\010\uff96\015\uff96\016\uff96\022" +
    "\uff96\023\uff96\024\uff96\025\uff96\034\uff96\037\uff96\001\002" +
    "\000\020\012\174\031\175\032\157\033\164\034\127\050" +
    "\160\061\167\001\002\000\006\013\271\014\270\001\002" +
    "\000\004\033\272\001\002\000\004\011\uff7f\001\002\000" +
    "\004\013\273\001\002\000\004\011\uff7e\001\002\000\032" +
    "\003\uff94\006\uff94\007\uff94\010\uff94\015\uff94\016\uff94\022" +
    "\uff94\023\uff94\024\uff94\025\uff94\034\uff94\037\uff94\001\002" +
    "\000\032\003\uff9c\006\uff9c\007\uff9c\010\uff9c\015\uff9c\016" +
    "\uff9c\022\uff9c\023\uff9c\024\uff9c\025\277\034\uff9c\037\uff9c" +
    "\001\002\000\032\003\uff73\006\uff73\007\uff73\010\uff73\015" +
    "\uff73\016\uff73\022\uff73\023\uff73\024\uff73\025\uff73\034\uff73" +
    "\037\uff73\001\002\000\006\007\137\024\136\001\002\000" +
    "\032\003\uff74\006\uff74\007\uff74\010\uff74\015\uff74\016\uff74" +
    "\022\uff74\023\uff74\024\uff74\025\uff74\034\uff74\037\uff74\001" +
    "\002\000\030\003\144\006\126\007\137\010\302\015\143" +
    "\016\134\022\125\023\142\024\136\034\127\037\150\001" +
    "\002\000\032\003\uff92\006\uff92\007\uff92\010\uff92\015\uff92" +
    "\016\uff92\022\uff92\023\uff92\024\uff92\025\uff92\034\uff92\037" +
    "\uff92\001\002\000\020\012\174\031\175\032\157\033\164" +
    "\034\127\050\160\061\167\001\002\000\004\013\305\001" +
    "\002\000\026\003\uff72\006\uff72\007\uff72\015\uff72\016\uff72" +
    "\022\uff72\023\uff72\024\uff72\034\uff72\037\uff72\001\002\000" +
    "\004\011\uff7c\001\002\000\032\003\uff98\006\uff98\007\uff98" +
    "\010\uff98\015\uff98\016\uff98\022\uff98\023\uff98\024\uff98\025" +
    "\uff98\034\uff98\037\uff98\001\002\000\032\003\uff97\006\uff97" +
    "\007\uff97\010\uff97\015\uff97\016\uff97\022\uff97\023\uff97\024" +
    "\uff97\025\uff97\034\uff97\037\uff97\001\002\000\032\003\uff99" +
    "\006\uff99\007\uff99\010\uff99\015\uff99\016\uff99\022\uff99\023" +
    "\uff99\024\uff99\025\uff99\034\uff99\037\uff99\001\002\000\072" +
    "\011\uff82\012\uff82\013\uff82\014\uff82\020\uff82\021\uff82\035" +
    "\uff82\036\uff82\040\uff82\041\uff82\042\uff82\043\uff82\044\uff82" +
    "\045\uff82\046\uff82\047\uff82\051\uff82\052\uff82\053\uff82\054" +
    "\uff82\055\uff82\056\uff82\057\uff82\060\uff82\061\uff82\062\uff82" +
    "\063\uff82\064\uff82\001\002\000\072\011\uff87\012\uff87\013" +
    "\uff87\014\uff87\020\314\021\uff87\035\uff87\036\uff87\040\uff87" +
    "\041\uff87\042\uff87\043\uff87\044\uff87\045\uff87\046\uff87\047" +
    "\315\051\uff87\052\uff87\053\uff87\054\uff87\055\uff87\056\uff87" +
    "\057\uff87\060\uff87\061\uff87\062\uff87\063\uff87\064\uff87\001" +
    "\002\000\020\012\uff85\031\uff85\032\uff85\033\uff85\034\uff85" +
    "\050\uff85\061\uff85\001\002\000\004\034\316\001\002\000" +
    "\072\011\uff86\012\uff86\013\uff86\014\uff86\020\uff86\021\uff86" +
    "\035\uff86\036\uff86\040\uff86\041\uff86\042\uff86\043\uff86\044" +
    "\uff86\045\uff86\046\uff86\047\uff86\051\uff86\052\uff86\053\uff86" +
    "\054\uff86\055\uff86\056\uff86\057\uff86\060\uff86\061\uff86\062" +
    "\uff86\063\uff86\064\uff86\001\002\000\020\012\174\031\175" +
    "\032\157\033\164\034\127\050\160\061\167\001\002\000" +
    "\004\021\uff84\001\002\000\004\021\322\001\002\000\072" +
    "\011\uff83\012\uff83\013\uff83\014\uff83\020\uff83\021\uff83\035" +
    "\uff83\036\uff83\040\uff83\041\uff83\042\uff83\043\uff83\044\uff83" +
    "\045\uff83\046\uff83\047\uff83\051\uff83\052\uff83\053\uff83\054" +
    "\uff83\055\uff83\056\uff83\057\uff83\060\uff83\061\uff83\062\uff83" +
    "\063\uff83\064\uff83\001\002\000\032\003\uff95\006\uff95\007" +
    "\uff95\010\uff95\015\uff95\016\uff95\022\uff95\023\uff95\024\uff95" +
    "\025\uff95\034\uff95\037\uff95\001\002\000\004\034\127\001" +
    "\002\000\004\013\326\001\002\000\004\011\uff7b\001\002" +
    "\000\006\011\uff8e\013\uff8e\001\002\000\016\052\341\053" +
    "\226\054\235\055\233\056\234\057\230\001\002\000\006" +
    "\011\uff8d\013\uff8d\001\002\000\022\012\174\013\334\031" +
    "\175\032\157\033\164\034\127\050\160\061\167\001\002" +
    "\000\004\013\335\001\002\000\006\011\uff90\013\uff90\001" +
    "\002\000\006\011\uff8f\013\uff8f\001\002\000\020\012\uff4b" +
    "\031\uff4b\032\uff4b\033\uff4b\034\uff4b\050\uff4b\061\uff4b\001" +
    "\002\000\020\012\uff4c\031\uff4c\032\uff4c\033\uff4c\034\uff4c" +
    "\050\uff4c\061\uff4c\001\002\000\020\012\174\031\175\032" +
    "\157\033\164\034\127\050\160\061\167\001\002\000\020" +
    "\012\uff4d\031\uff4d\032\uff4d\033\uff4d\034\uff4d\050\uff4d\061" +
    "\uff4d\001\002\000\006\011\uff8b\013\uff8b\001\002\000\012" +
    "\005\uffd1\010\uffd1\017\uffd1\034\uffd1\001\002\000\004\007" +
    "\uffc5\001\002\000\010\003\346\011\uffbd\034\351\001\002" +
    "\000\006\011\uffbf\014\356\001\002\000\004\011\uffc1\001" +
    "\002\000\004\014\354\001\002\000\006\014\uffbc\020\352" +
    "\001\002\000\004\021\353\001\002\000\004\014\uffbb\001" +
    "\002\000\010\003\346\011\uffbd\034\351\001\002\000\004" +
    "\011\uffc0\001\002\000\010\003\346\011\uffbd\034\351\001" +
    "\002\000\004\011\uffbe\001\002\000\010\013\uffc8\014\uffc8" +
    "\020\361\001\002\000\004\021\362\001\002\000\006\013" +
    "\uffc7\014\uffc7\001\002\000\004\034\013\001\002\000\004" +
    "\013\uffca\001\002\000\004\012\uffce\001\002\000\004\007" +
    "\uffe3\001\002\000\014\003\uffee\007\uffee\026\uffee\030\uffee" +
    "\034\uffee\001\002\000\010\010\373\017\375\034\013\001" +
    "\002\000\004\012\u0100\001\002\000\004\034\377\001\002" +
    "\000\004\002\001\001\002\000\010\010\uffb9\017\uffb9\034" +
    "\uffb9\001\002\000\004\034\376\001\002\000\004\012\uffb4" +
    "\001\002\000\004\012\uffb5\001\002\000\006\013\uffb2\034" +
    "\013\001\002\000\004\034\u0120\001\002\000\004\013\uffb3" +
    "\001\002\000\004\013\u0107\001\002\000\006\013\uffb0\014" +
    "\u0105\001\002\000\004\034\013\001\002\000\004\013\uffb1" +
    "\001\002\000\010\003\u0109\007\uffab\034\013\001\002\000" +
    "\004\034\uffa8\001\002\000\006\007\uffa9\011\u0113\001\002" +
    "\000\004\007\u010f\001\002\000\004\007\uffac\001\002\000" +
    "\004\011\u010d\001\002\000\010\003\u0109\007\uffab\034\013" +
    "\001\002\000\004\007\uffad\001\002\000\030\003\uffb7\006" +
    "\uffb7\007\uffb7\010\uffb7\015\uffb7\016\uffb7\022\uffb7\023\uffb7" +
    "\024\uffb7\034\uffb7\037\uffb7\001\002\000\030\003\uff9d\006" +
    "\uff9d\007\uff9d\010\uff9d\015\uff9d\016\uff9d\022\uff9d\023\uff9d" +
    "\024\uff9d\034\uff9d\037\uff9d\001\002\000\030\003\144\006" +
    "\126\007\137\010\u0112\015\143\016\134\022\125\023\142" +
    "\024\136\034\127\037\150\001\002\000\010\010\uffb6\017" +
    "\uffb6\034\uffb6\001\002\000\004\007\uffaa\001\002\000\004" +
    "\034\u0117\001\002\000\004\011\uffa7\001\002\000\010\003" +
    "\u011a\011\uffa2\014\uffa2\001\002\000\012\003\uffa0\011\uffa0" +
    "\014\uffa0\020\u0118\001\002\000\004\021\u0119\001\002\000" +
    "\010\003\uff9f\011\uff9f\014\uff9f\001\002\000\006\011\uffa1" +
    "\014\uffa1\001\002\000\006\011\uffa3\014\uffa3\001\002\000" +
    "\006\011\uffa6\014\u011d\001\002\000\006\003\u011e\034\u0117" +
    "\001\002\000\006\011\uffa4\014\uffa4\001\002\000\006\011" +
    "\uffa5\014\uffa5\001\002\000\010\013\uffaf\014\uffaf\020\u0121" +
    "\001\002\000\004\021\u0122\001\002\000\006\013\uffae\014" +
    "\uffae\001\002\000\006\003\u0125\034\u0127\001\002\000\006" +
    "\011\uffec\014\u012e\001\002\000\006\011\uffe9\014\u012c\001" +
    "\002\000\004\011\uffea\001\002\000\010\011\uffe8\014\uffe8" +
    "\020\u012a\001\002\000\004\011\u0129\001\002\000\014\003" +
    "\uffef\007\uffef\026\uffef\030\uffef\034\uffef\001\002\000\004" +
    "\021\u012b\001\002\000\006\011\uffe7\014\uffe7\001\002\000" +
    "\006\003\u0125\034\u0127\001\002\000\004\011\uffeb\001\002" +
    "\000\006\003\u0125\034\u0127\001\002\000\004\011\uffed\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012e\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\005\001\001\000\004\004\007\001\001\000\002" +
    "\001\001\000\014\006\013\007\017\013\014\017\015\115" +
    "\010\001\001\000\004\123\u0122\001\001\000\004\005\367" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\115\022\001\001\000\004\122" +
    "\023\001\001\000\006\010\026\011\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\042\001\001\000\004\115\365\001\001\000\004\124" +
    "\043\001\001\000\002\001\001\000\010\036\045\037\047" +
    "\115\046\001\001\000\004\021\067\001\001\000\004\125" +
    "\051\001\001\000\010\036\050\037\047\115\046\001\001" +
    "\000\002\001\001\000\010\027\055\041\056\042\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\027\055\041\065\042\052\001\001\000" +
    "\002\001\001\000\004\040\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\022\072\023\073\001\001\000" +
    "\002\001\001\000\006\024\077\115\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\025\106" +
    "\031\105\032\103\115\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\026\112\033\113\115\110\001\001\000\004\127\344\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\026\115\033\113\115\110\001\001\000\002\001" +
    "\001\000\004\126\117\001\001\000\006\030\120\057\121" +
    "\001\001\000\002\001\001\000\034\060\144\061\132\062" +
    "\123\063\137\064\146\065\131\066\130\067\127\070\150" +
    "\071\145\075\134\076\140\107\122\001\001\000\004\132" +
    "\327\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\133\311\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\107\162\110\170\111\171\112\161\114\167\116\305\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\057\300" +
    "\001\001\000\002\001\001\000\034\060\275\061\274\062" +
    "\123\063\137\064\146\065\131\066\130\067\127\070\150" +
    "\071\145\075\134\076\140\107\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\067\152\070\150\071\145\073\153" +
    "\107\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\074\164\107\162\110\170\111\171\112\161\114\167" +
    "\116\160\117\172\120\165\121\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\115\256\001\001\000\004" +
    "\102\254\001\001\000\010\104\231\106\226\141\230\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\107\162\110\170\111\171\112" +
    "\161\114\210\001\001\000\002\001\001\000\004\143\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\107" +
    "\162\110\170\111\171\112\161\114\167\116\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\107\162\110\170\111\171\112\161\114\167\116\160" +
    "\117\172\121\200\001\001\000\002\001\001\000\004\105" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\144\206\001\001\000\006\107\162\111" +
    "\207\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\067\152\070\150\071\145\073\212\107\122\001\001\000" +
    "\002\001\001\000\004\136\214\001\001\000\034\060\215" +
    "\061\132\062\123\063\137\064\146\065\131\066\130\067" +
    "\127\070\150\071\145\075\134\076\140\107\122\001\001" +
    "\000\002\001\001\000\020\072\217\107\162\110\170\111" +
    "\171\112\161\114\167\116\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\072\223\107" +
    "\162\110\170\111\171\112\161\114\167\116\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\140\244\001\001\000\002\001\001\000\004\103\241" +
    "\001\001\000\004\137\235\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\107\162\110\170" +
    "\111\171\112\161\114\236\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\142\242\001\001" +
    "\000\010\107\162\110\243\111\171\001\001\000\004\143" +
    "\201\001\001\000\014\107\162\110\170\111\171\112\161" +
    "\114\245\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\107\162\110\170\111" +
    "\171\112\161\114\167\116\255\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\107\162\110\170\111\171\112" +
    "\161\114\167\116\260\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\107\162\110\170\111\171\112\161\114" +
    "\167\116\160\117\172\120\263\121\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\107\162\110\170\111" +
    "\171\112\161\114\167\116\266\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\062\277\075\134\076\140\001\001\000" +
    "\002\001\001\000\034\060\144\061\132\062\123\063\137" +
    "\064\146\065\131\066\130\067\127\070\150\071\145\075" +
    "\134\076\140\107\122\001\001\000\002\001\001\000\024" +
    "\107\162\110\170\111\171\112\161\114\167\116\160\117" +
    "\172\120\303\121\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\113\312\001\001\000\002" +
    "\001\001\000\004\134\316\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\107\162\110\170\111\171\112\161" +
    "\114\167\116\317\001\001\000\004\135\320\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\107\324\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\101\337\104\336\106\335\001\001" +
    "\000\002\001\001\000\020\072\332\107\162\110\170\111" +
    "\171\112\161\114\167\116\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\107\162\110\170\111\171\112\161" +
    "\114\167\116\341\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\034\346" +
    "\035\347\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\034\354\035\347\001\001\000\002\001" +
    "\001\000\006\034\356\035\347\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\031\363\032\103\115\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\043\373\045\370\115\371\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\046\u0102\055\u0101\056\u0103\115\u0100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\055\u0105\056\u0103\115\u0100\001\001\000\002\001" +
    "\001\000\012\044\u010a\047\u0109\052\u010b\115\u0107\001\001" +
    "\000\004\131\u0113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\044\u010a" +
    "\047\u010d\052\u010b\115\u0107\001\001\000\002\001\001\000" +
    "\004\130\u010f\001\001\000\004\057\u0110\001\001\000\034" +
    "\060\144\061\132\062\123\063\137\064\146\065\131\066" +
    "\130\067\127\070\150\071\145\075\134\076\140\107\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\053" +
    "\u0114\054\u0115\001\001\000\002\001\001\000\006\050\u011b" +
    "\051\u011a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\u011e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\u0127\015\u0125\016\u0123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\u012c\015\u0125\016\u0123" +
    "\001\001\000\002\001\001\000\010\014\u012e\015\u0125\016" +
    "\u0123\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  Tab.init(); 

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    Symbol s = this.getScanner().next_token();
    if (s != null && s.value != null) 
            log.info(s.toString() + " " + s.value.toString());
    return s;

    }

	
    ParserActionImplementer impl = new ParserActionImplementer() ;	
    int printCallCount = 0;
    boolean errorDetected = false;

    Logger log = Logger.getLogger(getClass());
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      impl.reportError(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        impl.reportError("\nSyntax error : ", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        impl.reportFatalError("Error : parsing has to be stopped", cur_token);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


    ParserActionImplementer impl = new ParserActionImplementer() ;	

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // MulopRight ::= ASSIGNMOD 
            {
              Integer RESULT =null;
		 RESULT = new Integer(100+Code.rem); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",68, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // MulopRight ::= ASSIGNDIV 
            {
              Integer RESULT =null;
		 RESULT = new Integer(100+Code.div); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",68, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // MulopRight ::= ASSIGNMUL 
            {
              Integer RESULT =null;
		 RESULT = new Integer(100+Code.mul); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",68, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // MulopLeft ::= MOD 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.rem); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // MulopLeft ::= DIV 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.div); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // MulopLeft ::= MUL 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.mul); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // AddopRight ::= ASSIGNMINUS 
            {
              Integer RESULT =null;
		 RESULT = new Integer(100+Code.sub); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // AddopRight ::= ASSIGNPLUS 
            {
              Integer RESULT =null;
		 RESULT = new Integer(100+Code.add); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // AddopLeft ::= SUB 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.sub); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // AddopLeft ::= ADD 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.add); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // Assignop ::= MulopRight 
            {
              Integer RESULT =null;
		int mulopRightleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mulopRightright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer mulopRight = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = mulopRight; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // Assignop ::= AddopRight 
            {
              Integer RESULT =null;
		int addopRightleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int addopRightright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer addopRight = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = addopRight; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // Assignop ::= ASSIGN 
            {
              Integer RESULT =null;
		 RESULT = new Integer(0); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // Relop ::= LEQ 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.le); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // Relop ::= LT 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.lt); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // Relop ::= GEQ 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.ge); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // Relop ::= GT 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.gt); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // Relop ::= NEQ 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.ne); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // Relop ::= EQ 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.eq); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Factor ::= NEW Type 
            {
              Obj RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",71, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Factor ::= NEW Type LBRACK Expr RBRACK 
            {
              Obj RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT = impl.factorNewArray(type, expr, typeleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",71, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Factor ::= LPAREN Expr RPAREN 
            {
              Obj RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT = impl.factorNewExpr(expr, exprleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",71, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Factor ::= BOOL 
            {
              Obj RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = impl.factorNewBool(bool,boolleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",71, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Factor ::= CHAR 
            {
              Obj RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = impl.factorNewChar(c,cleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",71, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Factor ::= NUMBER 
            {
              Obj RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = impl.factorNewNumber(num, numleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",71, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Factor ::= Designator LPAREN ActPars RPAREN 
            {
              Obj RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT = impl.factorNewMethod(des, desleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",71, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Factor ::= Designator LPAREN RPAREN 
            {
              Obj RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT = impl.factorNewMethod(des, desleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",71, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Factor ::= Designator 
            {
              Obj RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = impl.factorNewDesignator(des, desleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",71, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Term ::= Term NT$17 MulopLeft NT$18 Factor 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int mulopleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int mulopright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer mulop = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int factorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj factor = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 if(impl.isArray(factor.getType())) Code.load(factor); RESULT = impl.mulLeft(term, mulop, factor, termleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",70, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // NT$18 ::= 
            {
              Obj RESULT =(Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int mulopleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mulopright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer mulop = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.mulOpLeftOccured++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$18",98, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // NT$17 ::= 
            {
              Obj RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 if(impl.isArray(term.getType())) Code.load(term); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$17",97, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Term ::= Factor 
            {
              Obj RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj factor = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = factor; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",70, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // TermList ::= TermList NT$15 AddopLeft NT$16 Term 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int termListleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int termListright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj termList = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int addopleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int addopright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer addop = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 if(impl.isArray(term.getType())) Code.load(term); RESULT = impl.addLeft(termList, addop, term, termListleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermList",72, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NT$16 ::= 
            {
              Obj RESULT =(Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int termListleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int termListright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj termList = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int addopleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int addopright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer addop = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.addOpLeftOccured++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$16",96, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // NT$15 ::= 
            {
              Obj RESULT =null;
		int termListleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termListright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj termList = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 if(impl.isArray(termList.getType())) Code.load(termList); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$15",95, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // TermList ::= Term 
            {
              Obj RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = term; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermList",72, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // TermListWrapper ::= TermList MulopRight NT$14 TermListWrapper 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int termListleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int termListright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj termList = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int mulopleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int mulopright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer mulop = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int termListWrapperleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termListWrapperright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj termListWrapper = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = impl.mulRight(termList, mulop, termListWrapper, termListleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermListWrapper",74, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NT$14 ::= 
            {
              Obj RESULT =null;
		int termListleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int termListright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj termList = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int mulopleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mulopright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer mulop = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.mulOpRightOccured++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$14",94, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // TermListWrapper ::= TermList AddopRight NT$13 TermListWrapper 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int termListleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int termListright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj termList = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int addopleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int addopright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer addop = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int termListWrapperleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termListWrapperright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj termListWrapper = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = impl.addRight(termList, addop, termListWrapper, termListleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermListWrapper",74, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NT$13 ::= 
            {
              Obj RESULT =null;
		int termListleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int termListright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj termList = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int addopleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int addopright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer addop = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.addOpRightOccured++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$13",93, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // TermListWrapper ::= TermList 
            {
              Obj RESULT =null;
		int termListleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termListright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj termList = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.termListWrapperCheckTermListForArray(termList, termListleft); RESULT = termList; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermListWrapper",74, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Expr ::= SUB TermListWrapper 
            {
              Struct RESULT =null;
		int termListWrapperleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termListWrapperright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj termListWrapper = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = termListWrapper.getType(); Code.put(Code.neg); impl.factorComesFromDesignator = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",76, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Expr ::= TermListWrapper 
            {
              Struct RESULT =null;
		int termListWrapperleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termListWrapperright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj termListWrapper = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = (termListWrapper!=null)?termListWrapper.getType():null; impl.factorComesFromDesignator = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",76, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ConditionFact ::= Expr Relop Expr 
            {
              Struct RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct expr1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int relopleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int relopright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer relop = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct expr2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = impl.compareTypes(expr1, expr2, expr1left); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionFact",77, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ConditionFact ::= Expr 
            {
              Struct RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionFact",77, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ConditionTerm ::= ConditionFact AND ConditionTerm 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionTerm",79, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ConditionTerm ::= ConditionFact 
            {
              Struct RESULT =null;
		int conditionFactleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int conditionFactright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct conditionFact = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = conditionFact; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionTerm",79, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Condition ::= ConditionTerm OR Condition 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",78, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Condition ::= ConditionTerm 
            {
              Struct RESULT =null;
		int conditionTermleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int conditionTermright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct conditionTerm = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = conditionTerm; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",78, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // IfCondition ::= IF LPAREN Condition RPAREN 
            {
              Object RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct condition = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 impl.statementCheckIfCondition(condition, conditionleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfCondition",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // IfStatement ::= IfCondition Statement 
            {
              Object RESULT =null;
		int ifConditionleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int ifConditionright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object ifCondition = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int ifStatementleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int ifStatementright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object ifStatement = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfStatement",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // IfStatement ::= IfCondition StatementMatched ELSE StatementUnmatched 
            {
              Object RESULT =null;
		int ifConditionleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int ifConditionright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Object ifCondition = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int ifStatementleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int ifStatementright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object ifStatement = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int elseStatementleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int elseStatementright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object elseStatement = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfStatement",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ForStatementConditionExtension ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForStatementConditionExtension",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ForStatementConditionExtension ::= Condition 
            {
              Object RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct condition = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.statementCheckForCondition(condition, conditionleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForStatementConditionExtension",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ForStatementDesignatorExtension ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForStatementDesignatorExtension",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ForStatementDesignatorExtension ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForStatementDesignatorExtension",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ForStatement ::= FOR LPAREN ForStatementDesignatorExtension SEMI ForStatementConditionExtension SEMI ForStatementDesignatorExtension RPAREN NT$12 Statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 impl.forLoopEnd(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForStatement",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$12 ::= 
            {
              Object RESULT =null;
 impl.forLoopStart(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$12",92, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ReadStatement ::= READ LPAREN Designator RPAREN 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 impl.statementCheckRead(des, desleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReadStatement",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ReturnStatement ::= RETURN Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.markReturn(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ReturnStatement ::= RETURN 
            {
              Object RESULT =null;
		 impl.markReturn(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // PrintStatement ::= PRINT LPAREN Expr COMMA NUMBER RPAREN 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 impl.statementCheckPrint(expr, num, exprleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("PrintStatement",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // PrintStatement ::= PRINT LPAREN Expr RPAREN 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 impl.statementCheckPrint(expr, 1, exprleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("PrintStatement",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ActPars ::= Expr COMMA ActPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ActPars ::= Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DesignatorExtension ::= 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorExtension",73, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DesignatorExtension ::= DesignatorExtension LBRACK NT$10 Expr NT$11 RBRACK 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int lbrackleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int lbrackright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object lbrack = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorExtension",73, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$11 ::= 
            {
              Obj RESULT =(Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int lbrackleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lbrackright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object lbrack = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.checkIfInt(expr, exprleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$11",91, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$10 ::= 
            {
              Obj RESULT =null;
		int lbrackleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lbrackright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object lbrack = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 RESULT = impl.designatorExtensionResolveArray(lbrackleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$10",90, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // DesignatorExtension ::= DesignatorExtension DOT IDENT 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorExtension",73, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Designator ::= IDENT NT$9 DesignatorExtension 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int designatorExtensionleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int designatorExtensionright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj designatorExtension = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = impl.designatorResolveIdentificator(ident, designatorExtension, identleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",69, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$9 ::= 
            {
              Obj RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.setDesignatorArrayExtension(ident, identleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$9",89, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DesignatorAssignError ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorAssignError",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DesignatorAssign ::= DesignatorAssignError 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.reportInfo("Successful error recovery. Line ", errleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorAssign",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DesignatorAssign ::= Designator NT$8 Assignop Expr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = impl.assign(des, op, expr, desleft); impl.inAssign = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorAssign",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$8 ::= 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.inAssign = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$8",88, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DesignatorStatement ::= Designator DEC 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = impl.designatorDec(des, desleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DesignatorStatement ::= Designator INC 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int incright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object inc = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = impl.designatorInc(des, desleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DesignatorStatement ::= Designator LPAREN ActPars RPAREN 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DesignatorStatement ::= Designator LPAREN RPAREN 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT = impl.designatorCallMethod(des, null, desleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DesignatorStatement ::= DesignatorAssign 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // StatementUnmatched ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // StatementUnmatched ::= IfStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // StatementMatched ::= BREAK SEMI 
            {
              Object RESULT =null;
		int brkleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int brkright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object brk = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 impl.statementCheckBreak(brkleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // StatementMatched ::= CONTINUE SEMI 
            {
              Object RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object cont = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 impl.statementCheckContinue(contleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // StatementMatched ::= ReadStatement SEMI 
            {
              Object RESULT =null;
		int readStatementleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int readStatementright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object readStatement = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // StatementMatched ::= ReturnStatement SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // StatementMatched ::= PrintStatement SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // StatementMatched ::= DesignatorStatement SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // StatementMatched ::= ForStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Statement ::= StatementUnmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Statement ::= StatementMatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // MethodVar ::= IDENT LBRACK RBRACK 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 impl.addVar(varName, varNameleft, SymbolOrigin.LOCAL, true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVar",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // MethodVar ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.addVar(varName, varNameleft, SymbolOrigin.LOCAL, false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVar",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // MethodVarListAdditionalError ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarListAdditionalError",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // MethodVarListAdditional ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarListAdditional",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // MethodVarListAdditional ::= MethodVarListAdditionalError 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.reportInfo("Successful error recovery. Line ", errleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarListAdditional",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // MethodVarListAdditional ::= MethodVarListAdditional COMMA error 
            {
              Object RESULT =null;
		int methodVarListAdditionalleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int methodVarListAdditionalright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object methodVarListAdditional = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 impl.reportInfo("Successful error recovery. Line ", methodVarListAdditionalleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarListAdditional",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // MethodVarListAdditional ::= MethodVarListAdditional COMMA MethodVar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarListAdditional",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // MethodVarList ::= MethodVar MethodVarListAdditional 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // MethodVarDecl ::= Type NT$7 MethodVarList 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methodVarTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int methodVarTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct methodVarType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarDecl",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$7 ::= 
            {
              Object RESULT =null;
		int methodVarTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methodVarTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct methodVarType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.currentVarType = methodVarType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",87, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // MethodVarDeclError ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarDeclError",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // MethodVarDeclError ::= error SEMI 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarDeclError",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // MethodVarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarDeclList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // MethodVarDeclList ::= MethodVarDeclError 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.reportInfo("Successful error recovery on line ", errleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarDeclList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // MethodVarDeclList ::= MethodVarDecl SEMI MethodVarDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarDeclList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FormalParamDecl ::= Type IDENT LBRACK RBRACK 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 impl.currentVarType = type; impl.addVar(name, nameleft, SymbolOrigin.UNIMPORTANT, true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FormalParamDecl ::= Type IDENT 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.currentVarType = type; impl.addVar(name, nameleft, SymbolOrigin.UNIMPORTANT, false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FormalParamList ::= FormalParamDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FormalParamList ::= FormalParamDecl COMMA FormalParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FormPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FormPars ::= FormalParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // MethodReturnType ::= VOID IDENT 
            {
              Object RESULT =null;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.currentMethodName=methodName; impl.currentMethodType = null; impl.currentMethodNameLine=methodNameleft;  impl.addMethod(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodReturnType",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // MethodReturnType ::= Type IDENT 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.currentMethodName=methodName; impl.currentMethodType = type; impl.currentMethodNameLine=methodNameleft; impl.addMethod(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodReturnType",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // MethodDecl ::= MethodReturnType LPAREN FormPars RPAREN MethodVarDeclList LBRACE NT$6 StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int methodReturnTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int methodReturnTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Object methodReturnType = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		 impl.methodEnd(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$6 ::= 
            {
              Object RESULT =null;
		int methodReturnTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int methodReturnTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Object methodReturnType = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
 impl.methodStart(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",86, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MethodList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // MethodList ::= MethodList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ClassStatementList ::= StatementList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassStatementList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ClassMethodVar ::= IDENT LBRACK RBRACK 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 impl.addVar(varName, varNameleft, SymbolOrigin.UNIMPORTANT, true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVar",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ClassMethodVar ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.addVar(varName, varNameleft, SymbolOrigin.UNIMPORTANT, false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVar",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ClassMethodVarList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVarList",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ClassMethodVarList ::= error COMMA ClassMethodVarList 
            {
              Object RESULT =null;
		int classMethodVarListleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classMethodVarListright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object classMethodVarList = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.reportInfo("Successful error recovery. Line ", classMethodVarListleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVarList",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ClassMethodVarList ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.reportInfo("Successful error recovery. Line ", errleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVarList",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ClassMethodVarList ::= ClassMethodVar COMMA ClassMethodVarList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVarList",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ClassMethodVarDecl ::= Type NT$5 ClassMethodVarList 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVarDecl",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$5 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.currentVarType = type; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",85, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ClassMethodVarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVarDeclList",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ClassMethodVarDeclList ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.reportInfo("Successful error recovery on line ", errleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVarDeclList",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ClassMethodVarDeclList ::= error SEMI 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 impl.reportInfo("Successful error recovery on line ", errleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVarDeclList",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ClassMethodVarDeclList ::= ClassMethodVarDecl SEMI ClassMethodVarDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVarDeclList",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ClassFormalParamDecl ::= Type IDENT LBRACK RBRACK 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 impl.currentVarType = type; impl.addVar(varName, varNameleft, SymbolOrigin.UNIMPORTANT, true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassFormalParamDecl",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ClassFormalParamDecl ::= Type IDENT 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.currentVarType = type; impl.addVar(varName, varNameleft, SymbolOrigin.UNIMPORTANT, false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassFormalParamDecl",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ClassFormalParamList ::= ClassFormalParamDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassFormalParamList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ClassFormalParamList ::= ClassFormalParamDecl COMMA ClassFormalParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassFormalParamList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ClassFormPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassFormPars",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ClassFormPars ::= ClassFormalParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassFormPars",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ClassMethodReturnType ::= VOID IDENT 
            {
              Object RESULT =null;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.currentMethodName=methodName; impl.currentMethodType = null; impl.currentMethodNameLine=methodNameleft;  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodReturnType",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ClassMethodReturnType ::= Type IDENT 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.currentMethodName=methodName; impl.currentMethodType = type; impl.currentMethodNameLine=methodNameleft;  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodReturnType",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ClassMethodStatic ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodStatic",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ClassMethodStatic ::= STATIC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodStatic",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ClassMethodDecl ::= ClassMethodStatic ClassMethodReturnType LPAREN ClassFormPars RPAREN ClassMethodVarDeclList LBRACE NT$4 ClassStatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 impl.methodEnd(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodDecl",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$4 ::= 
            {
              Object RESULT =null;
 impl.addMethod(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",84, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ClassMethodList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodList",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ClassMethodList ::= ClassMethodList ClassMethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodList",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ClassMethodListOptional ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodListOptional",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ClassMethodListOptional ::= LBRACE ClassMethodList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodListOptional",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ClassVar ::= IDENT LBRACK RBRACK 
            {
              Object RESULT =null;
		int classVarNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int classVarNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String classVarName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 impl.addVar(classVarName, classVarNameleft, SymbolOrigin.LOCAL, true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVar",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ClassVar ::= IDENT 
            {
              Object RESULT =null;
		int classVarNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classVarNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String classVarName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.addVar(classVarName, classVarNameleft, SymbolOrigin.LOCAL, false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVar",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ClassVarError ::= error LBRACE 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 impl.reportInfo("Successful error recovery. Line ", errleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarError",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ClassVarError ::= error SEMI 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarError",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ClassVarList ::= ClassVarError 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.reportInfo("Successful error recovery. Line ", errleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarList",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ClassVarList ::= ClassVar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarList",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ClassVarList ::= ClassVar COMMA ClassVarList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarList",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClassVarDecl ::= Type NT$3 ClassVarList SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int classVarTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int classVarTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct classVarType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDecl",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$3 ::= 
            {
              Object RESULT =null;
		int classVarTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classVarTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct classVarType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.currentVarType = classVarType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",83, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassVarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDeclList",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassVarDeclList ::= ClassVarDecl ClassVarDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDeclList",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassExtended ::= 
            {
              Object RESULT =null;
		 impl.currentClassParent = null; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassExtended",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassExtended ::= EXTENDS Type 
            {
              Object RESULT =null;
		int parentleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int parentright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct parent = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.currentClassParent = parent; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassExtended",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassDecl ::= CLASS IDENT ClassExtended NT$2 LBRACE ClassVarDeclList ClassMethodListOptional RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int classExtendedleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int classExtendedright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Object classExtended = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		 impl.classEnd(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$2 ::= 
            {
              Object RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int classExtendedleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classExtendedright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object classExtended = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.classStart(className, classExtendedleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",82, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = impl.resolveType(typeName, typeNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",75, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // GlobalVar ::= IDENT LBRACK RBRACK 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 impl.addVar(varName, varNameleft, SymbolOrigin.GLOBAL, true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVar",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // GlobalVar ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.addVar(varName, varNameleft, SymbolOrigin.GLOBAL, false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVar",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // GlobalVarListError ::= error 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarListError",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // GlobalVarList ::= GlobalVarListError 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.reportInfo("Successful error recovery. Line", errleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // GlobalVarList ::= error COMMA GlobalVarList 
            {
              Object RESULT =null;
		int globalVarListleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int globalVarListright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object globalVarList = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.reportInfo("Successful error recovery. Line ", globalVarListleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // GlobalVarList ::= GlobalVar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // GlobalVarList ::= GlobalVar COMMA GlobalVarList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // GlobalVarDecl ::= error SEMI 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 impl.reportInfo("Successful error recovery. Line ", errleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDecl",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // GlobalVarDecl ::= Type NT$1 GlobalVarList SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDecl",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$1 ::= 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.currentVarType = varType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",81, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConstType ::= BOOL 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = bool; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstType",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstType ::= CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = c; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstType",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstType ::= NUMBER 
            {
              Object RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer number = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = number; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstType",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Constant ::= IDENT ASSIGN ConstType 
            {
              Object RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int constValueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constValueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object constValue = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.addConst(constName, constValue, constNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstList ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.reportError("Successful error recovery on line ", errleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstList ::= ConstList COMMA Constant 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstList ::= Constant 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDecl ::= CONST Type NT$0 ConstList SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.currentConstType = type; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",80, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GlobalParameterType ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalParameterType",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalParameterType ::= GlobalVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalParameterType",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GlobalParameterType ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalParameterType",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GlobalParameterList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalParameterList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // GlobalParameterList ::= GlobalParameterList GlobalParameterType 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalParameterList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramName ::= IDENT 
            {
              Object RESULT =null;
		int progNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int progNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String progName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = Tab.insert(Obj.Prog, progName.toString(), Tab.noType); impl.programStart(progName); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramName",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG ProgramName GlobalParameterList LBRACE MethodList RBRACE 
            {
              Object RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object pName = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		 impl.programEnd(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

