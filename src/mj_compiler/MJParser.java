
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Dec 25 18:22:40 CET 2016
//----------------------------------------------------

package mj_compiler;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import utils.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Dec 25 18:22:40 CET 2016
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\265\000\002\002\010\000\002\002\004\000\002\003" +
    "\003\000\002\004\004\000\002\004\002\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\120\002\000" +
    "\002\007\007\000\002\010\004\000\002\010\005\000\002" +
    "\010\002\000\002\011\005\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\121\002\000\002\013\006" +
    "\000\002\014\005\000\002\014\003\000\002\014\003\000" +
    "\002\014\005\000\002\015\003\000\002\015\005\000\002" +
    "\117\003\000\002\122\002\000\002\016\012\000\002\017" +
    "\004\000\002\017\002\000\002\034\004\000\002\034\002" +
    "\000\002\123\002\000\002\035\006\000\002\037\005\000" +
    "\002\037\003\000\002\037\003\000\002\037\005\000\002" +
    "\040\003\000\002\040\005\000\002\020\005\000\002\020" +
    "\002\000\002\036\004\000\002\036\002\000\002\124\002" +
    "\000\002\021\014\000\002\022\003\000\002\022\002\000" +
    "\002\023\004\000\002\023\004\000\002\024\003\000\002" +
    "\024\002\000\002\027\005\000\002\027\003\000\002\030" +
    "\004\000\002\030\006\000\002\025\005\000\002\025\003" +
    "\000\002\025\002\000\002\125\002\000\002\031\005\000" +
    "\002\032\003\000\002\032\005\000\002\032\002\000\002" +
    "\033\003\000\002\033\005\000\002\033\004\000\002\033" +
    "\004\000\002\026\003\000\002\005\004\000\002\005\002" +
    "\000\002\126\002\000\002\041\013\000\002\042\004\000" +
    "\002\042\004\000\002\043\003\000\002\043\002\000\002" +
    "\051\005\000\002\051\003\000\002\052\004\000\002\052" +
    "\006\000\002\044\005\000\002\044\003\000\002\044\002" +
    "\000\002\127\002\000\002\046\005\000\002\047\004\000" +
    "\002\047\002\000\002\045\005\000\002\045\002\000\002" +
    "\050\003\000\002\050\005\000\002\050\004\000\002\050" +
    "\004\000\002\053\004\000\002\053\002\000\002\054\003" +
    "\000\002\054\003\000\002\055\003\000\002\055\004\000" +
    "\002\055\004\000\002\055\004\000\002\055\004\000\002" +
    "\055\004\000\002\055\004\000\002\056\005\000\002\056" +
    "\003\000\002\130\002\000\002\063\005\000\002\064\003" +
    "\000\002\065\004\000\002\065\005\000\002\065\004\000" +
    "\002\065\003\000\002\065\003\000\002\061\007\000\002" +
    "\067\004\000\002\067\002\000\002\062\003\000\002\062" +
    "\004\000\002\060\006\000\002\057\013\000\002\070\003" +
    "\000\002\070\002\000\002\071\003\000\002\071\002\000" +
    "\002\075\006\000\002\075\004\000\002\076\006\000\002" +
    "\072\003\000\002\072\005\000\002\073\003\000\002\073" +
    "\005\000\002\074\003\000\002\074\005\000\002\111\003" +
    "\000\002\111\005\000\002\112\003\000\002\112\006\000" +
    "\002\100\003\000\002\100\005\000\002\077\003\000\002" +
    "\077\004\000\002\066\003\000\002\113\003\000\002\113" +
    "\005\000\002\114\003\000\002\115\003\000\002\115\005" +
    "\000\002\116\003\000\002\116\006\000\002\116\005\000" +
    "\002\116\003\000\002\116\003\000\002\116\003\000\002" +
    "\116\005\000\002\116\007\000\002\116\004\000\002\101" +
    "\003\000\002\101\003\000\002\101\003\000\002\101\003" +
    "\000\002\101\003\000\002\101\003\000\002\102\003\000" +
    "\002\102\003\000\002\102\003\000\002\103\003\000\002" +
    "\103\003\000\002\104\003\000\002\104\003\000\002\105" +
    "\003\000\002\105\003\000\002\106\003\000\002\106\003" +
    "\000\002\107\003\000\002\107\003\000\002\107\003\000" +
    "\002\110\003\000\002\110\003\000\002\110\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011a\000\004\004\005\001\002\000\004\002\u011c\001" +
    "\002\000\004\034\007\001\002\000\012\007\ufffd\026\ufffd" +
    "\030\ufffd\034\ufffd\001\002\000\012\007\uffff\026\uffff\030" +
    "\uffff\034\uffff\001\002\000\012\007\012\026\020\030\021" +
    "\034\013\001\002\000\006\003\ufff0\034\ufff0\001\002\000" +
    "\010\010\uffbb\017\uffbb\034\uffbb\001\002\000\066\003\uffe8" +
    "\007\uffe8\011\uffe8\013\uffe8\014\uffe8\020\uffe8\021\uffe8\034" +
    "\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8" +
    "\046\uffe8\051\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057" +
    "\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8\001\002" +
    "\000\012\007\ufffe\026\ufffe\030\ufffe\034\ufffe\001\002\000" +
    "\012\007\ufffb\026\ufffb\030\ufffb\034\ufffb\001\002\000\012" +
    "\007\ufffa\026\ufffa\030\ufffa\034\ufffa\001\002\000\012\007" +
    "\ufffc\026\ufffc\030\ufffc\034\ufffc\001\002\000\004\034\037" +
    "\001\002\000\004\034\013\001\002\000\010\011\ufff9\014" +
    "\ufff9\034\ufff9\001\002\000\010\011\ufff5\014\ufff5\034\ufff5" +
    "\001\002\000\010\011\026\014\025\034\030\001\002\000" +
    "\004\034\030\001\002\000\012\007\ufff8\026\ufff8\030\ufff8" +
    "\034\ufff8\001\002\000\010\011\ufff7\014\ufff7\034\ufff7\001" +
    "\002\000\004\052\031\001\002\000\010\031\035\032\034" +
    "\033\032\001\002\000\010\011\ufff3\014\ufff3\034\ufff3\001" +
    "\002\000\010\011\ufff4\014\ufff4\034\ufff4\001\002\000\010" +
    "\011\ufff1\014\ufff1\034\ufff1\001\002\000\010\011\ufff2\014" +
    "\ufff2\034\ufff2\001\002\000\010\011\ufff6\014\ufff6\034\ufff6" +
    "\001\002\000\006\007\uffe4\027\040\001\002\000\004\034" +
    "\013\001\002\000\004\007\uffe7\001\002\000\004\007\043" +
    "\001\002\000\010\007\uffe2\010\uffe2\034\013\001\002\000" +
    "\006\007\064\010\uffd8\001\002\000\006\003\uffe1\034\uffe1" +
    "\001\002\000\010\007\uffe2\010\uffe2\034\013\001\002\000" +
    "\006\007\uffe3\010\uffe3\001\002\000\006\003\052\034\053" +
    "\001\002\000\006\011\uffde\014\062\001\002\000\006\011" +
    "\uffdd\014\060\001\002\000\010\011\uffdb\014\uffdb\020\056" +
    "\001\002\000\004\011\055\001\002\000\010\007\uffe0\010" +
    "\uffe0\034\uffe0\001\002\000\004\021\057\001\002\000\006" +
    "\011\uffda\014\uffda\001\002\000\006\003\052\034\053\001" +
    "\002\000\004\011\uffdc\001\002\000\006\003\052\034\053" +
    "\001\002\000\004\011\uffdf\001\002\000\012\005\uffd6\010" +
    "\uffd6\017\uffd6\034\uffd6\001\002\000\004\010\066\001\002" +
    "\000\012\007\uffe6\026\uffe6\030\uffe6\034\uffe6\001\002\000" +
    "\012\005\072\010\073\017\uffd2\034\uffd2\001\002\000\012" +
    "\005\uffd7\010\uffd7\017\uffd7\034\uffd7\001\002\000\006\017" +
    "\076\034\013\001\002\000\006\017\uffd3\034\uffd3\001\002" +
    "\000\004\010\uffd9\001\002\000\004\034\345\001\002\000" +
    "\004\012\100\001\002\000\004\034\077\001\002\000\004" +
    "\012\uffd0\001\002\000\006\013\uffce\034\013\001\002\000" +
    "\006\013\uffcc\014\343\001\002\000\004\034\340\001\002" +
    "\000\004\013\uffcf\001\002\000\004\013\105\001\002\000" +
    "\006\007\uffc7\034\013\001\002\000\012\003\uffc6\007\uffc6" +
    "\011\uffc6\034\uffc6\001\002\000\004\007\uffd5\001\002\000" +
    "\006\007\uffc8\011\111\001\002\000\006\007\uffc7\034\013" +
    "\001\002\000\004\007\uffc9\001\002\000\004\007\114\001" +
    "\002\000\026\006\uffa2\007\uffa2\010\uffa2\015\uffa2\016\uffa2" +
    "\022\uffa2\023\uffa2\024\uffa2\034\uffa2\037\uffa2\001\002\000" +
    "\004\010\324\001\002\000\026\006\123\007\135\010\uffbd" +
    "\015\141\016\131\022\122\023\137\024\133\034\124\037" +
    "\144\001\002\000\024\012\uff96\035\uff96\036\uff96\052\uff96" +
    "\053\uff96\054\uff96\055\uff96\056\uff96\057\uff96\001\002\000" +
    "\070\011\uff7a\012\uff7a\013\uff7a\014\uff7a\021\uff7a\035\uff7a" +
    "\036\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a\044\uff7a\045" +
    "\uff7a\046\uff7a\047\uff7a\051\uff7a\052\uff7a\053\uff7a\054\uff7a" +
    "\055\uff7a\056\uff7a\057\uff7a\060\uff7a\061\uff7a\062\uff7a\063" +
    "\uff7a\064\uff7a\001\002\000\030\006\uffa0\007\uffa0\010\uffa0" +
    "\015\uffa0\016\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\034" +
    "\uffa0\037\uffa0\001\002\000\004\012\304\001\002\000\004" +
    "\011\303\001\002\000\072\011\uff78\012\uff78\013\uff78\014" +
    "\uff78\020\300\021\uff78\035\uff78\036\uff78\040\uff78\041\uff78" +
    "\042\uff78\043\uff78\044\uff78\045\uff78\046\uff78\047\uff78\051" +
    "\uff78\052\uff78\053\uff78\054\uff78\055\uff78\056\uff78\057\uff78" +
    "\060\uff78\061\uff78\062\uff78\063\uff78\064\uff78\001\002\000" +
    "\004\011\277\001\002\000\004\011\276\001\002\000\004" +
    "\011\275\001\002\000\030\006\uffa1\007\uffa1\010\uffa1\015" +
    "\uffa1\016\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\034\uffa1" +
    "\037\uffa1\001\002\000\022\011\uff8b\012\157\031\154\032" +
    "\165\033\162\034\124\050\164\061\161\001\002\000\030" +
    "\006\uff97\007\uff97\010\uff97\015\uff97\016\uff97\022\uff97\023" +
    "\uff97\024\uff97\025\uff97\034\uff97\037\uff97\001\002\000\004" +
    "\012\271\001\002\000\030\006\uff9f\007\uff9f\010\uff9f\015" +
    "\uff9f\016\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\034\uff9f" +
    "\037\uff9f\001\002\000\026\006\uffa2\007\uffa2\010\uffa2\015" +
    "\uffa2\016\uffa2\022\uffa2\023\uffa2\024\uffa2\034\uffa2\037\uffa2" +
    "\001\002\000\024\006\123\007\135\015\141\016\131\022" +
    "\122\023\137\024\133\034\124\037\144\001\002\000\004" +
    "\011\263\001\002\000\070\011\uff94\012\uff94\013\uff94\014" +
    "\uff94\021\uff94\035\uff94\036\uff94\040\uff94\041\uff94\042\uff94" +
    "\043\uff94\044\uff94\045\uff94\046\uff94\047\261\051\uff94\052" +
    "\uff94\053\uff94\054\uff94\055\uff94\056\uff94\057\uff94\060\uff94" +
    "\061\uff94\062\uff94\063\uff94\064\uff94\001\002\000\004\012" +
    "\253\001\002\000\026\006\uffa3\007\uffa3\010\uffa3\015\uffa3" +
    "\016\uffa3\022\uffa3\023\uffa3\024\uffa3\034\uffa3\037\uffa3\001" +
    "\002\000\004\011\252\001\002\000\004\012\145\001\002" +
    "\000\006\011\uff86\034\124\001\002\000\006\011\uff87\013" +
    "\uff87\001\002\000\004\011\150\001\002\000\022\011\uff84" +
    "\012\157\031\154\032\165\033\162\034\124\050\164\061" +
    "\161\001\002\000\060\011\uff6c\012\242\013\uff6c\014\uff6c" +
    "\021\uff6c\040\uff6c\041\uff6c\042\uff6c\043\uff6c\044\uff6c\045" +
    "\uff6c\046\uff6c\051\uff6c\053\uff6c\054\uff6c\055\uff6c\056\uff6c" +
    "\057\uff6c\060\uff6c\061\uff6c\062\uff6c\063\uff6c\064\uff6c\001" +
    "\002\000\056\011\uff6e\013\uff6e\014\uff6e\021\uff6e\040\uff6e" +
    "\041\uff6e\042\uff6e\043\uff6e\044\uff6e\045\uff6e\046\uff6e\051" +
    "\uff6e\053\uff6e\054\uff6e\055\uff6e\056\uff6e\057\uff6e\060\uff6e" +
    "\061\uff6e\062\uff6e\063\uff6e\064\uff6e\001\002\000\004\011" +
    "\236\001\002\000\056\011\uff68\013\uff68\014\uff68\021\uff68" +
    "\040\uff68\041\uff68\042\uff68\043\uff68\044\uff68\045\uff68\046" +
    "\uff68\051\uff68\053\uff68\054\uff68\055\uff68\056\uff68\057\uff68" +
    "\060\uff68\061\uff68\062\uff68\063\uff68\064\uff68\001\002\000" +
    "\056\011\uff6f\013\uff6f\014\uff6f\021\uff6f\040\uff6f\041\uff6f" +
    "\042\uff6f\043\uff6f\044\uff6f\045\uff6f\046\uff6f\051\uff6f\053" +
    "\uff6f\054\uff6f\055\232\056\227\057\225\060\uff6f\061\uff6f" +
    "\062\234\063\230\064\226\001\002\000\026\011\uff7c\013" +
    "\uff7c\040\uff7c\041\uff7c\042\221\043\216\044\217\045\215" +
    "\046\220\051\214\001\002\000\020\012\157\031\154\032" +
    "\165\033\162\034\124\050\164\061\161\001\002\000\012" +
    "\011\uff7e\013\uff7e\040\uff7e\041\210\001\002\000\016\012" +
    "\157\031\154\032\165\033\162\034\124\050\164\001\002" +
    "\000\056\011\uff69\013\uff69\014\uff69\021\uff69\040\uff69\041" +
    "\uff69\042\uff69\043\uff69\044\uff69\045\uff69\046\uff69\051\uff69" +
    "\053\uff69\054\uff69\055\uff69\056\uff69\057\uff69\060\uff69\061" +
    "\uff69\062\uff69\063\uff69\064\uff69\001\002\000\032\011\uff74" +
    "\013\uff74\014\uff74\021\uff74\040\uff74\041\uff74\042\uff74\043" +
    "\uff74\044\uff74\045\uff74\046\uff74\051\uff74\001\002\000\004" +
    "\034\013\001\002\000\056\011\uff67\013\uff67\014\uff67\021" +
    "\uff67\040\uff67\041\uff67\042\uff67\043\uff67\044\uff67\045\uff67" +
    "\046\uff67\051\uff67\053\uff67\054\uff67\055\uff67\056\uff67\057" +
    "\uff67\060\uff67\061\uff67\062\uff67\063\uff67\064\uff67\001\002" +
    "\000\042\011\uff71\013\uff71\014\uff71\021\uff71\040\uff71\041" +
    "\uff71\042\uff71\043\uff71\044\uff71\045\uff71\046\uff71\051\uff71" +
    "\053\173\054\200\060\175\061\174\001\002\000\004\011" +
    "\uff85\001\002\000\010\011\uff80\013\uff80\040\171\001\002" +
    "\000\020\012\157\031\154\032\165\033\162\034\124\050" +
    "\164\061\161\001\002\000\006\011\uff7f\013\uff7f\001\002" +
    "\000\020\012\uff56\031\uff56\032\uff56\033\uff56\034\uff56\050" +
    "\uff56\061\uff56\001\002\000\016\012\uff57\031\uff57\032\uff57" +
    "\033\uff57\034\uff57\050\uff57\001\002\000\016\012\uff58\031" +
    "\uff58\032\uff58\033\uff58\034\uff58\050\uff58\001\002\000\016" +
    "\012\uff59\031\uff59\032\uff59\033\uff59\034\uff59\050\uff59\001" +
    "\002\000\016\012\157\031\154\032\165\033\162\034\124" +
    "\050\164\001\002\000\020\012\uff55\031\uff55\032\uff55\033" +
    "\uff55\034\uff55\050\uff55\061\uff55\001\002\000\016\012\uff5a" +
    "\031\uff5a\032\uff5a\033\uff5a\034\uff5a\050\uff5a\001\002\000" +
    "\032\011\uff70\013\uff70\014\uff70\021\uff70\040\uff70\041\uff70" +
    "\042\uff70\043\uff70\044\uff70\045\uff70\046\uff70\051\uff70\001" +
    "\002\000\060\011\uff64\013\uff64\014\uff64\020\204\021\uff64" +
    "\040\uff64\041\uff64\042\uff64\043\uff64\044\uff64\045\uff64\046" +
    "\uff64\051\uff64\053\uff64\054\uff64\055\uff64\056\uff64\057\uff64" +
    "\060\uff64\061\uff64\062\uff64\063\uff64\064\uff64\001\002\000" +
    "\020\012\157\031\154\032\165\033\162\034\124\050\164" +
    "\061\161\001\002\000\004\021\206\001\002\000\056\011" +
    "\uff65\013\uff65\014\uff65\021\uff65\040\uff65\041\uff65\042\uff65" +
    "\043\uff65\044\uff65\045\uff65\046\uff65\051\uff65\053\uff65\054" +
    "\uff65\055\uff65\056\uff65\057\uff65\060\uff65\061\uff65\062\uff65" +
    "\063\uff65\064\uff65\001\002\000\032\011\uff73\013\uff73\014" +
    "\uff73\021\uff73\040\uff73\041\uff73\042\uff73\043\uff73\044\uff73" +
    "\045\uff73\046\uff73\051\uff73\001\002\000\020\012\157\031" +
    "\154\032\165\033\162\034\124\050\164\061\161\001\002" +
    "\000\010\011\uff7d\013\uff7d\040\uff7d\001\002\000\004\013" +
    "\213\001\002\000\056\011\uff66\013\uff66\014\uff66\021\uff66" +
    "\040\uff66\041\uff66\042\uff66\043\uff66\044\uff66\045\uff66\046" +
    "\uff66\051\uff66\053\uff66\054\uff66\055\uff66\056\uff66\057\uff66" +
    "\060\uff66\061\uff66\062\uff66\063\uff66\064\uff66\001\002\000" +
    "\020\012\uff63\031\uff63\032\uff63\033\uff63\034\uff63\050\uff63" +
    "\061\uff63\001\002\000\020\012\uff5f\031\uff5f\032\uff5f\033" +
    "\uff5f\034\uff5f\050\uff5f\061\uff5f\001\002\000\020\012\uff61" +
    "\031\uff61\032\uff61\033\uff61\034\uff61\050\uff61\061\uff61\001" +
    "\002\000\020\012\uff60\031\uff60\032\uff60\033\uff60\034\uff60" +
    "\050\uff60\061\uff60\001\002\000\020\012\uff5e\031\uff5e\032" +
    "\uff5e\033\uff5e\034\uff5e\050\uff5e\061\uff5e\001\002\000\020" +
    "\012\uff62\031\uff62\032\uff62\033\uff62\034\uff62\050\uff62\061" +
    "\uff62\001\002\000\020\012\157\031\154\032\165\033\162" +
    "\034\124\050\164\061\161\001\002\000\012\011\uff7b\013" +
    "\uff7b\040\uff7b\041\uff7b\001\002\000\016\012\uff53\031\uff53" +
    "\032\uff53\033\uff53\034\uff53\050\uff53\001\002\000\020\012" +
    "\uff4d\031\uff4d\032\uff4d\033\uff4d\034\uff4d\050\uff4d\061\uff4d" +
    "\001\002\000\016\012\uff50\031\uff50\032\uff50\033\uff50\034" +
    "\uff50\050\uff50\001\002\000\020\012\uff4e\031\uff4e\032\uff4e" +
    "\033\uff4e\034\uff4e\050\uff4e\061\uff4e\001\002\000\016\012" +
    "\uff51\031\uff51\032\uff51\033\uff51\034\uff51\050\uff51\001\002" +
    "\000\016\012\157\031\154\032\165\033\162\034\124\050" +
    "\164\001\002\000\020\012\uff4f\031\uff4f\032\uff4f\033\uff4f" +
    "\034\uff4f\050\uff4f\061\uff4f\001\002\000\016\012\uff54\031" +
    "\uff54\032\uff54\033\uff54\034\uff54\050\uff54\001\002\000\016" +
    "\012\uff52\031\uff52\032\uff52\033\uff52\034\uff52\050\uff52\001" +
    "\002\000\056\011\uff6d\013\uff6d\014\uff6d\021\uff6d\040\uff6d" +
    "\041\uff6d\042\uff6d\043\uff6d\044\uff6d\045\uff6d\046\uff6d\051" +
    "\uff6d\053\uff6d\054\uff6d\055\uff6d\056\uff6d\057\uff6d\060\uff6d" +
    "\061\uff6d\062\uff6d\063\uff6d\064\uff6d\001\002\000\006\013" +
    "\uff86\034\124\001\002\000\004\013\240\001\002\000\024" +
    "\006\123\007\135\015\141\016\131\022\122\023\137\024" +
    "\133\034\124\037\144\001\002\000\030\006\uff88\007\uff88" +
    "\010\uff88\015\uff88\016\uff88\022\uff88\023\uff88\024\uff88\025" +
    "\uff88\034\uff88\037\uff88\001\002\000\022\012\157\013\243" +
    "\031\154\032\165\033\162\034\124\050\164\061\161\001" +
    "\002\000\056\011\uff6a\013\uff6a\014\uff6a\021\uff6a\040\uff6a" +
    "\041\uff6a\042\uff6a\043\uff6a\044\uff6a\045\uff6a\046\uff6a\051" +
    "\uff6a\053\uff6a\054\uff6a\055\uff6a\056\uff6a\057\uff6a\060\uff6a" +
    "\061\uff6a\062\uff6a\063\uff6a\064\uff6a\001\002\000\004\013" +
    "\uff72\001\002\000\006\013\uff76\014\250\001\002\000\004" +
    "\013\247\001\002\000\056\011\uff6b\013\uff6b\014\uff6b\021" +
    "\uff6b\040\uff6b\041\uff6b\042\uff6b\043\uff6b\044\uff6b\045\uff6b" +
    "\046\uff6b\051\uff6b\053\uff6b\054\uff6b\055\uff6b\056\uff6b\057" +
    "\uff6b\060\uff6b\061\uff6b\062\uff6b\063\uff6b\064\uff6b\001\002" +
    "\000\020\012\157\031\154\032\165\033\162\034\124\050" +
    "\164\061\161\001\002\000\004\013\uff75\001\002\000\030" +
    "\006\uff9b\007\uff9b\010\uff9b\015\uff9b\016\uff9b\022\uff9b\023" +
    "\uff9b\024\uff9b\025\uff9b\034\uff9b\037\uff9b\001\002\000\020" +
    "\012\157\031\154\032\165\033\162\034\124\050\164\061" +
    "\161\001\002\000\006\013\uff8c\014\255\001\002\000\004" +
    "\033\260\001\002\000\004\013\257\001\002\000\004\011" +
    "\uff8e\001\002\000\004\013\uff8d\001\002\000\004\034\124" +
    "\001\002\000\070\011\uff79\012\uff79\013\uff79\014\uff79\021" +
    "\uff79\035\uff79\036\uff79\040\uff79\041\uff79\042\uff79\043\uff79" +
    "\044\uff79\045\uff79\046\uff79\047\uff79\051\uff79\052\uff79\053" +
    "\uff79\054\uff79\055\uff79\056\uff79\057\uff79\060\uff79\061\uff79" +
    "\062\uff79\063\uff79\064\uff79\001\002\000\030\006\uff99\007" +
    "\uff99\010\uff99\015\uff99\016\uff99\022\uff99\023\uff99\024\uff99" +
    "\025\uff99\034\uff99\037\uff99\001\002\000\030\006\uff82\007" +
    "\uff82\010\uff82\015\uff82\016\uff82\022\uff82\023\uff82\024\uff82" +
    "\025\265\034\uff82\037\uff82\001\002\000\024\006\123\007" +
    "\135\015\141\016\131\022\122\023\137\024\133\034\124" +
    "\037\144\001\002\000\030\006\uff83\007\uff83\010\uff83\015" +
    "\uff83\016\uff83\022\uff83\023\uff83\024\uff83\025\uff83\034\uff83" +
    "\037\uff83\001\002\000\026\006\123\007\135\010\270\015" +
    "\141\016\131\022\122\023\137\024\133\034\124\037\144" +
    "\001\002\000\030\006\uff98\007\uff98\010\uff98\015\uff98\016" +
    "\uff98\022\uff98\023\uff98\024\uff98\025\uff98\034\uff98\037\uff98" +
    "\001\002\000\020\012\157\031\154\032\165\033\162\034" +
    "\124\050\164\061\161\001\002\000\004\013\273\001\002" +
    "\000\024\006\uff81\007\uff81\015\uff81\016\uff81\022\uff81\023" +
    "\uff81\024\uff81\034\uff81\037\uff81\001\002\000\004\011\uff8a" +
    "\001\002\000\030\006\uff9d\007\uff9d\010\uff9d\015\uff9d\016" +
    "\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\034\uff9d\037\uff9d" +
    "\001\002\000\030\006\uff9c\007\uff9c\010\uff9c\015\uff9c\016" +
    "\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\034\uff9c\037\uff9c" +
    "\001\002\000\030\006\uff9e\007\uff9e\010\uff9e\015\uff9e\016" +
    "\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\034\uff9e\037\uff9e" +
    "\001\002\000\020\012\157\031\154\032\165\033\162\034" +
    "\124\050\164\061\161\001\002\000\004\021\302\001\002" +
    "\000\070\011\uff77\012\uff77\013\uff77\014\uff77\021\uff77\035" +
    "\uff77\036\uff77\040\uff77\041\uff77\042\uff77\043\uff77\044\uff77" +
    "\045\uff77\046\uff77\047\uff77\051\uff77\052\uff77\053\uff77\054" +
    "\uff77\055\uff77\056\uff77\057\uff77\060\uff77\061\uff77\062\uff77" +
    "\063\uff77\064\uff77\001\002\000\030\006\uff9a\007\uff9a\010" +
    "\uff9a\015\uff9a\016\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a" +
    "\034\uff9a\037\uff9a\001\002\000\004\034\124\001\002\000" +
    "\004\013\306\001\002\000\004\011\uff89\001\002\000\024" +
    "\012\317\035\315\036\316\052\314\053\173\054\200\055" +
    "\232\056\227\057\225\001\002\000\006\011\uff95\013\uff95" +
    "\001\002\000\020\012\uff5b\031\uff5b\032\uff5b\033\uff5b\034" +
    "\uff5b\050\uff5b\061\uff5b\001\002\000\020\012\uff5c\031\uff5c" +
    "\032\uff5c\033\uff5c\034\uff5c\050\uff5c\061\uff5c\001\002\000" +
    "\020\012\157\031\154\032\165\033\162\034\124\050\164" +
    "\061\161\001\002\000\020\012\uff5d\031\uff5d\032\uff5d\033" +
    "\uff5d\034\uff5d\050\uff5d\061\uff5d\001\002\000\006\011\uff90" +
    "\013\uff90\001\002\000\006\011\uff8f\013\uff8f\001\002\000" +
    "\022\012\157\013\320\031\154\032\165\033\162\034\124" +
    "\050\164\061\161\001\002\000\006\011\uff91\013\uff91\001" +
    "\002\000\004\013\322\001\002\000\006\011\uff92\013\uff92" +
    "\001\002\000\006\011\uff93\013\uff93\001\002\000\012\005" +
    "\uffd4\010\uffd4\017\uffd4\034\uffd4\001\002\000\012\003\326" +
    "\007\uffc2\011\uffc2\034\331\001\002\000\006\007\336\011" +
    "\337\001\002\000\006\007\uffc5\011\uffc5\001\002\000\010" +
    "\007\uffc4\011\uffc4\014\334\001\002\000\012\007\uffc1\011" +
    "\uffc1\014\uffc1\020\332\001\002\000\004\021\333\001\002" +
    "\000\010\007\uffc0\011\uffc0\014\uffc0\001\002\000\012\003" +
    "\326\007\uffc2\011\uffc2\034\331\001\002\000\006\007\uffc3" +
    "\011\uffc3\001\002\000\010\007\uffbe\011\uffbe\014\uffbe\001" +
    "\002\000\010\007\uffbf\011\uffbf\014\uffbf\001\002\000\010" +
    "\013\uffcb\014\uffcb\020\341\001\002\000\004\021\342\001" +
    "\002\000\006\013\uffca\014\uffca\001\002\000\004\034\013" +
    "\001\002\000\004\013\uffcd\001\002\000\004\012\uffd1\001" +
    "\002\000\004\007\uffe5\001\002\000\010\010\352\017\354" +
    "\034\013\001\002\000\004\012\357\001\002\000\004\034" +
    "\356\001\002\000\004\002\001\001\002\000\010\010\uffbc" +
    "\017\uffbc\034\uffbc\001\002\000\004\034\355\001\002\000" +
    "\004\012\uffb7\001\002\000\004\012\uffb8\001\002\000\006" +
    "\013\uffb5\034\013\001\002\000\004\034\u010d\001\002\000" +
    "\004\013\uffb6\001\002\000\004\013\366\001\002\000\006" +
    "\013\uffb3\014\364\001\002\000\004\034\013\001\002\000" +
    "\004\013\uffb4\001\002\000\006\007\uffae\034\013\001\002" +
    "\000\012\003\uffad\007\uffad\011\uffad\034\uffad\001\002\000" +
    "\004\007\uffba\001\002\000\006\007\uffaf\011\372\001\002" +
    "\000\006\007\uffae\034\013\001\002\000\004\007\uffb0\001" +
    "\002\000\004\007\375\001\002\000\026\006\uffa2\007\uffa2" +
    "\010\uffa2\015\uffa2\016\uffa2\022\uffa2\023\uffa2\024\uffa2\034" +
    "\uffa2\037\uffa2\001\002\000\026\006\123\007\135\010\377" +
    "\015\141\016\131\022\122\023\137\024\133\034\124\037" +
    "\144\001\002\000\010\010\uffb9\017\uffb9\034\uffb9\001\002" +
    "\000\012\003\u0101\007\uffaa\011\uffaa\034\u0104\001\002\000" +
    "\006\007\u010b\011\u010c\001\002\000\006\007\uffac\011\uffac" +
    "\001\002\000\010\007\uffa8\011\uffa8\014\u0107\001\002\000" +
    "\012\007\uffa7\011\uffa7\014\uffa7\020\u0105\001\002\000\004" +
    "\021\u0106\001\002\000\010\007\uffa6\011\uffa6\014\uffa6\001" +
    "\002\000\006\003\u0101\034\u0104\001\002\000\006\007\uffab" +
    "\011\uffab\001\002\000\010\007\uffa8\011\uffa8\014\u0107\001" +
    "\002\000\006\007\uffa9\011\uffa9\001\002\000\010\007\uffa4" +
    "\011\uffa4\014\uffa4\001\002\000\010\007\uffa5\011\uffa5\014" +
    "\uffa5\001\002\000\010\013\uffb2\014\uffb2\020\u010e\001\002" +
    "\000\004\021\u010f\001\002\000\006\013\uffb1\014\uffb1\001" +
    "\002\000\006\003\u0112\034\u0113\001\002\000\006\011\uffed" +
    "\014\u011a\001\002\000\006\011\uffec\014\u0118\001\002\000" +
    "\010\011\uffea\014\uffea\020\u0116\001\002\000\004\011\u0115" +
    "\001\002\000\012\007\uffef\026\uffef\030\uffef\034\uffef\001" +
    "\002\000\004\021\u0117\001\002\000\006\011\uffe9\014\uffe9" +
    "\001\002\000\006\003\u0112\034\u0113\001\002\000\004\011" +
    "\uffeb\001\002\000\006\003\u0112\034\u0113\001\002\000\004" +
    "\011\uffee\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011a\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\005\001\001\000\004\004\007\001\001\000\002" +
    "\001\001\000\014\006\013\007\016\013\014\016\015\117" +
    "\010\001\001\000\004\121\u010f\001\001\000\004\005\346" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\117\021\001\001\000\004\120\022\001\001\000" +
    "\004\010\023\001\001\000\004\011\026\001\001\000\004" +
    "\011\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\040\001\001\000\004\117\345" +
    "\001\001\000\004\122\041\001\001\000\002\001\001\000" +
    "\010\034\043\035\045\117\044\001\001\000\004\020\064" +
    "\001\001\000\004\123\047\001\001\000\010\034\046\035" +
    "\045\117\044\001\001\000\002\001\001\000\006\037\053" +
    "\040\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\037\060\040\050\001" +
    "\001\000\002\001\001\000\006\037\062\040\050\001\001" +
    "\000\002\001\001\000\004\036\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\067\022\070\001\001" +
    "\000\002\001\001\000\006\023\074\117\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\024" +
    "\103\027\102\030\100\117\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\025\106\031\107\117\105\001\001\000\004\125\324" +
    "\001\001\000\004\124\112\001\001\000\002\001\001\000" +
    "\010\025\111\031\107\117\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\114\053\115\001\001\000" +
    "\002\001\001\000\034\054\141\055\127\056\120\057\133" +
    "\060\142\061\126\062\125\063\124\064\116\075\131\076" +
    "\135\111\137\112\117\001\001\000\004\130\306\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\064" +
    "\150\077\273\111\137\112\117\113\162\114\165\115\154" +
    "\116\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\266\001\001\000\034\054\263" +
    "\055\127\056\120\057\133\060\142\061\126\062\125\063" +
    "\124\064\116\075\131\076\135\111\137\112\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\063\145\064\116\070\146\111\137\112\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\064\150\071\152" +
    "\072\166\073\167\074\157\077\155\111\137\112\117\113" +
    "\162\114\165\115\154\116\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\106\230\107\232\110\223\001\001\000\004\101\221" +
    "\001\001\000\022\064\150\077\211\111\137\112\117\113" +
    "\162\114\165\115\154\116\151\001\001\000\002\001\001" +
    "\000\020\064\150\111\137\112\117\113\206\114\165\115" +
    "\154\116\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\117\202\001\001\000\002\001\001\000\010\103" +
    "\176\104\200\105\175\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\064\150\072\171\073\167\074\157\077" +
    "\155\111\137\112\117\113\162\114\165\115\154\116\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\064\150" +
    "\111\137\112\117\113\201\114\165\115\154\116\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\064\150\077\204\111\137\112" +
    "\117\113\162\114\165\115\154\116\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\064" +
    "\150\073\210\074\157\077\155\111\137\112\117\113\162" +
    "\114\165\115\154\116\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\064\150\077\222\111\137" +
    "\112\117\113\162\114\165\115\154\116\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\064" +
    "\150\111\137\112\117\116\234\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\063\145\064\116\070\236\111\137\112\117\001\001" +
    "\000\002\001\001\000\034\054\240\055\127\056\120\057" +
    "\133\060\142\061\126\062\125\063\124\064\116\075\131" +
    "\076\135\111\137\112\117\001\001\000\002\001\001\000" +
    "\026\064\150\066\245\077\244\100\243\111\137\112\117" +
    "\113\162\114\165\115\154\116\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\064\150\077\244\100\250\111" +
    "\137\112\117\113\162\114\165\115\154\116\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\064\150\077" +
    "\253\111\137\112\117\113\162\114\165\115\154\116\151" +
    "\001\001\000\004\067\255\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\112\261\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\054\265\055\127\056\120\057\133" +
    "\060\142\061\126\062\125\063\124\064\116\075\131\076" +
    "\135\111\137\112\117\001\001\000\002\001\001\000\034" +
    "\054\141\055\127\056\120\057\133\060\142\061\126\062" +
    "\125\063\124\064\116\075\131\076\135\111\137\112\117" +
    "\001\001\000\002\001\001\000\030\064\150\072\271\073" +
    "\167\074\157\077\155\111\137\112\117\113\162\114\165" +
    "\115\154\116\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\064\150\077\300\111\137\112" +
    "\117\113\162\114\165\115\154\116\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\064" +
    "\304\111\137\112\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\065\307\102\312\105\311\110\310\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\064\150\077\322\111\137\112\117\113\162\114" +
    "\165\115\154\116\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\064\150\066\320\077" +
    "\244\100\243\111\137\112\117\113\162\114\165\115\154" +
    "\116\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\032\326\033\327\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\032\334\033\327\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\027" +
    "\343\030\100\117\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\041\352\042\347\117" +
    "\350\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\043\361\051\360\052\362" +
    "\117\357\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\051\364\052\362" +
    "\117\357\001\001\000\002\001\001\000\010\044\367\046" +
    "\370\117\366\001\001\000\004\127\377\001\001\000\004" +
    "\126\373\001\001\000\002\001\001\000\010\044\372\046" +
    "\370\117\366\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\053\375\001\001\000\034\054\141\055\127\056" +
    "\120\057\133\060\142\061\126\062\125\063\124\064\116" +
    "\075\131\076\135\111\137\112\117\001\001\000\002\001" +
    "\001\000\006\047\u0101\050\u0102\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\u0107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\u0108" +
    "\001\001\000\002\001\001\000\004\045\u0109\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\u0113\015\u0110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\u0118\015\u0110" +
    "\001\001\000\002\001\001\000\006\014\u011a\015\u0110\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  Tab.init(); 

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    Symbol s = this.getScanner().next_token();
    if (s != null && s.value != null) 
            log.info(s.toString() + " " + s.value.toString());
    return s;

    }

	
    ParserActionImplementer impl = new ParserActionImplementer() ;	
    int printCallCount = 0;

    Logger log = Logger.getLogger(getClass());
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      impl.reportError(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        impl.reportError("\nSyntax error : ", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        impl.reportFatalError("Error : parsing has to be stopped", cur_token);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


    ParserActionImplementer impl = new ParserActionImplementer() ;	

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // MulopRight ::= ASSIGNMOD 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",70, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // MulopRight ::= ASSIGNDIV 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",70, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // MulopRight ::= ASSIGNMUL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",70, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // MulopLeft ::= MOD 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",69, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // MulopLeft ::= DIV 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",69, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // MulopLeft ::= MUL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",69, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // Mulop ::= MulopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",68, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Mulop ::= MulopLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",68, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // AddopRight ::= ASSIGNMINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // AddopRight ::= ASSIGNPLUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // AddopLeft ::= SUB 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // AddopLeft ::= ADD 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Addop ::= AddopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Addop ::= AddopLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Assignop ::= MulopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Assignop ::= AddopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Assignop ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Relop ::= LEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Relop ::= LT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Relop ::= GEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Relop ::= GT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Relop ::= NEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Relop ::= EQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Factor ::= NEW Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",76, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Factor ::= NEW Type LBRACK Expr RBRACK 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",76, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Factor ::= LPAREN Expr RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",76, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Factor ::= BOOL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",76, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Factor ::= CHAR 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",76, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Factor ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",76, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Factor ::= Designator LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",76, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Factor ::= Designator LPAREN ActPars RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",76, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Factor ::= Designator 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",76, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // FactorList ::= FactorList Mulop Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FactorList",75, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // FactorList ::= Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FactorList",75, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Term ::= FactorList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",74, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // TermList ::= Term Addop TermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermList",73, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // TermList ::= Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermList",73, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ActPars ::= ExprList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Expr ::= SUB TermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Expr ::= TermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ExprList ::= Expr COMMA ExprList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprList",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ExprList ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprList",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // IdentDecl ::= IDENT LBRACK Expr RBRACK 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentDecl",72, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // IdentDecl ::= IDENT 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentDecl",72, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // IdentList ::= IdentList DOT IdentDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",71, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // IdentList ::= IdentDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",71, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ConditionFact ::= Expr Relop Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionFact",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ConditionFact ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionFact",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ConditionTerm ::= ConditionFact AND ConditionTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionTerm",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ConditionTerm ::= ConditionFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionTerm",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Condition ::= ConditionTerm OR Condition 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Condition ::= ConditionTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // IfCondition ::= IF LPAREN Condition RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfCondition",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // IfStatement ::= IfCondition Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfStatement",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // IfStatement ::= IfCondition Statement ELSE Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfStatement",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ForStatementConditionExtension ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForStatementConditionExtension",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ForStatementConditionExtension ::= Condition 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForStatementConditionExtension",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ForStatementDesignatorExtension ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForStatementDesignatorExtension",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ForStatementDesignatorExtension ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForStatementDesignatorExtension",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ForStatement ::= FOR LPAREN ForStatementDesignatorExtension SEMI ForStatementConditionExtension SEMI ForStatementDesignatorExtension RPAREN Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForStatement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ReadStatement ::= READ LPAREN Designator RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReadStatement",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ReturnStatement ::= RETURN Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.markReturn(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ReturnStatement ::= RETURN 
            {
              Object RESULT =null;
		 impl.markReturn(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PrintExtension ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("PrintExtension",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PrintExtension ::= COMMA NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("PrintExtension",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PrintStatement ::= PRINT LPAREN Expr PrintExtension RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("PrintStatement",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DesignatorExtension ::= DEC 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorExtension",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DesignatorExtension ::= INC 
            {
              Object RESULT =null;
		int incleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int incright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object inc = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorExtension",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DesignatorExtension ::= LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorExtension",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DesignatorExtension ::= LPAREN ActPars RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorExtension",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DesignatorExtension ::= Assignop Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorExtension",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Designator ::= IdentList 
            {
              Object RESULT =null;
		int identListleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int identListright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object identList = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = identList; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DesignatorStatement ::= Designator NT$8 DesignatorExtension 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object des = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$8 ::= 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object des = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$8",86, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // StatementUnmatched ::= IfStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // StatementUnmatched ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // StatementMatched ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // StatementMatched ::= CONTINUE SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // StatementMatched ::= ReadStatement SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // StatementMatched ::= ReturnStatement SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // StatementMatched ::= PrintStatement SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // StatementMatched ::= DesignatorStatement SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // StatementMatched ::= ForStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Statement ::= StatementUnmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Statement ::= StatementMatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // MethodVar ::= error LBRACE 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 impl.reportInfo("Successful error recovery on line " + errleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVar",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // MethodVar ::= error SEMI 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 impl.reportInfo("Successful error recovery on line " + errleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVar",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // MethodVar ::= IDENT LBRACK RBRACK 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 impl.addVar(varName, varNameleft, SymbolOrigin.LOCAL, true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVar",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // MethodVar ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.addVar(varName, varNameleft, SymbolOrigin.LOCAL, false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVar",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // MethodVarListAdditional ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarListAdditional",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // MethodVarListAdditional ::= COMMA MethodVar MethodVarListAdditional 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarListAdditional",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // MethodVarList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // MethodVarList ::= MethodVar MethodVarListAdditional 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // MethodVarDecl ::= Type NT$7 MethodVarList 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methodVarTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int methodVarTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct methodVarType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarDecl",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$7 ::= 
            {
              Object RESULT =null;
		int methodVarTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methodVarTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct methodVarType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.currentVarType = methodVarType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",85, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // MethodVarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarDeclList",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // MethodVarDeclList ::= MethodVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarDeclList",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // MethodVarDeclList ::= MethodVarDecl SEMI MethodVarDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarDeclList",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FormalParamDecl ::= Type IDENT LBRACK RBRACK 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 impl.currentVarType = type; impl.addVar(name, nameleft, SymbolOrigin.UNIMPORTANT, true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FormalParamDecl ::= Type IDENT 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.currentVarType = type; impl.addVar(name, nameleft, SymbolOrigin.UNIMPORTANT, false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FormalParamList ::= FormalParamDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FormalParamList ::= FormalParamDecl COMMA FormalParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FormPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FormPars ::= FormalParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MethodReturnType ::= VOID IDENT 
            {
              Object RESULT =null;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.addMethod(methodName, null, methodNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodReturnType",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MethodReturnType ::= Type IDENT 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.addMethod(methodName, type, methodNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodReturnType",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // MethodDecl ::= MethodReturnType LPAREN FormPars RPAREN MethodVarDeclList NT$6 LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int methodReturnTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int methodReturnTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Object methodReturnType = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		 impl.methodEnd(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$6 ::= 
            {
              Object RESULT =null;
		int methodReturnTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int methodReturnTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object methodReturnType = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
 impl.methodStart(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",84, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // MethodList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // MethodList ::= MethodList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ClassStatementList ::= StatementList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassStatementList",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ClassMethodVar ::= error LBRACE 
            {
              Object RESULT =null;
		 impl.reportInfo("Successful error recovery."); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVar",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ClassMethodVar ::= error SEMI 
            {
              Object RESULT =null;
		 impl.reportInfo("Successful error recovery."); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVar",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ClassMethodVar ::= IDENT LBRACK RBRACK 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 impl.addVar(varName, varNameleft, SymbolOrigin.UNIMPORTANT, true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVar",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ClassMethodVar ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.addVar(varName, varNameleft, SymbolOrigin.UNIMPORTANT, false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVar",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ClassMethodVarList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVarList",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ClassMethodVarList ::= ClassMethodVar COMMA ClassMethodVarList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVarList",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ClassMethodVarList ::= ClassMethodVar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVarList",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ClassMethodVarDecl ::= Type NT$5 ClassMethodVarList 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVarDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$5 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.currentVarType = type; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",83, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ClassMethodVarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVarDeclList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ClassMethodVarDeclList ::= ClassMethodVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVarDeclList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ClassMethodVarDeclList ::= ClassMethodVarDecl SEMI ClassMethodVarDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVarDeclList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ClassFormalParamDecl ::= Type IDENT LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassFormalParamDecl",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ClassFormalParamDecl ::= Type IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassFormalParamDecl",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ClassFormalParamList ::= ClassFormalParamDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassFormalParamList",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ClassFormalParamList ::= ClassFormalParamDecl COMMA ClassFormalParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassFormalParamList",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ClassFormPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassFormPars",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ClassFormPars ::= ClassFormalParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassFormPars",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ClassMethodReturnType ::= VOID IDENT 
            {
              Object RESULT =null;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.addMethod(methodName, null, methodNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodReturnType",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ClassMethodReturnType ::= Type IDENT 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.addMethod(methodName, type, methodNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodReturnType",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ClassMethodStatic ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodStatic",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ClassMethodStatic ::= STATIC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodStatic",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ClassMethodDecl ::= ClassMethodStatic ClassMethodReturnType LPAREN ClassFormPars RPAREN ClassMethodVarDeclList NT$4 LBRACE ClassStatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		 impl.methodEnd(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodDecl",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$4 ::= 
            {
              Object RESULT =null;
 impl.methodStart(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",82, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ClassMethodList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodList",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ClassMethodList ::= ClassMethodList ClassMethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodList",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ClassMethodListOptional ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodListOptional",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ClassMethodListOptional ::= LBRACE ClassMethodList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodListOptional",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ClassVar ::= IDENT LBRACK RBRACK 
            {
              Object RESULT =null;
		int classVarNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int classVarNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String classVarName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 impl.addVar(classVarName, classVarNameleft, SymbolOrigin.LOCAL, true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVar",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ClassVar ::= IDENT 
            {
              Object RESULT =null;
		int classVarNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classVarNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String classVarName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.addVar(classVarName, classVarNameleft, SymbolOrigin.LOCAL, false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVar",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ClassVarList ::= error COMMA ClassVarList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarList",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ClassVarList ::= error 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarList",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClassVarList ::= ClassVar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarList",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassVarList ::= ClassVar COMMA ClassVarList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarList",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassVarDecl ::= Type NT$3 ClassVarList SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int classVarTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int classVarTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct classVarType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDecl",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$3 ::= 
            {
              Object RESULT =null;
		int classVarTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classVarTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct classVarType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.currentVarType = classVarType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",81, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassVarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDeclList",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassVarDeclList ::= ClassVarDecl ClassVarDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDeclList",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassExtended ::= 
            {
              Object RESULT =null;
		 impl.currentClassParent = null; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassExtended",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassExtended ::= EXTENDS Type 
            {
              Object RESULT =null;
		int parentleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int parentright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct parent = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.currentClassParent = parent; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassExtended",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassDecl ::= CLASS IDENT ClassExtended NT$2 LBRACE ClassVarDeclList ClassMethodListOptional RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int classExtendedleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int classExtendedright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Object classExtended = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		 impl.classEnd(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$2 ::= 
            {
              Object RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int classExtendedleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classExtendedright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object classExtended = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.classStart(className, classExtendedleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",80, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = impl.resolveType(typeName, typeNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",77, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // GlobalVar ::= IDENT LBRACK RBRACK 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 impl.addVar(varName, varNameleft, SymbolOrigin.GLOBAL, true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVar",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // GlobalVar ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.addVar(varName, varNameleft, SymbolOrigin.GLOBAL, false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVar",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // GlobalVarList ::= error COMMA GlobalVarList 
            {
              Object RESULT =null;
		 impl.reportInfo("Successful error recovery."); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // GlobalVarList ::= error 
            {
              Object RESULT =null;
		 impl.reportInfo("Successful error recovery."); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // GlobalVarList ::= GlobalVar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // GlobalVarList ::= GlobalVar COMMA GlobalVarList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // GlobalVarDecl ::= Type NT$1 GlobalVarList SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDecl",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$1 ::= 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.currentVarType = varType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",79, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConstType ::= BOOL 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = bool; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstType",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstType ::= CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = c; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstType",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstType ::= NUMBER 
            {
              Object RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer number = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = number; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstType",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Constant ::= IDENT ASSIGN ConstType 
            {
              Object RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int constValueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constValueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object constValue = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.addConst(constName, constValue, constNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstList ::= ConstList COMMA Constant 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstList ::= ConstList Constant 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDecl ::= CONST Type NT$0 ConstList SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.currentConstType = type; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",78, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GlobalParameterType ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalParameterType",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalParameterType ::= GlobalVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalParameterType",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GlobalParameterType ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalParameterType",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GlobalParameterList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalParameterList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // GlobalParameterList ::= GlobalParameterList GlobalParameterType 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalParameterList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramName ::= IDENT 
            {
              Object RESULT =null;
		int progNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int progNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String progName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = Tab.insert(Obj.Prog, progName.toString(), Tab.noType); impl.startProgram(progName); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramName",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG ProgramName GlobalParameterList LBRACE MethodList RBRACE 
            {
              Object RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object pName = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		 impl.endProgram(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

