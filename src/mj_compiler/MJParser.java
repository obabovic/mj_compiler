
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jan 09 11:36:10 CET 2017
//----------------------------------------------------

package mj_compiler;

import java_cup.runtime.*;
import rs.etf.pp1.mj.runtime.Code;
import org.apache.log4j.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import utils.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jan 09 11:36:10 CET 2017
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\271\000\002\002\010\000\002\002\004\000\002\003" +
    "\003\000\002\004\004\000\002\004\002\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\114\002\000" +
    "\002\007\007\000\002\010\003\000\002\010\005\000\002" +
    "\010\003\000\002\011\005\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\115\002\000\002\013\006" +
    "\000\002\013\004\000\002\014\005\000\002\014\003\000" +
    "\002\014\005\000\002\014\003\000\002\015\003\000\002" +
    "\015\005\000\002\107\003\000\002\116\002\000\002\016" +
    "\012\000\002\017\004\000\002\017\002\000\002\034\004" +
    "\000\002\034\002\000\002\117\002\000\002\035\006\000" +
    "\002\037\005\000\002\037\003\000\002\037\004\000\002" +
    "\037\004\000\002\040\003\000\002\040\005\000\002\020" +
    "\005\000\002\020\002\000\002\036\004\000\002\036\002" +
    "\000\002\120\002\000\002\021\014\000\002\022\003\000" +
    "\002\022\002\000\002\023\004\000\002\023\004\000\002" +
    "\024\003\000\002\024\002\000\002\027\005\000\002\027" +
    "\003\000\002\030\004\000\002\030\006\000\002\025\005" +
    "\000\002\025\004\000\002\025\003\000\002\025\002\000" +
    "\002\121\002\000\002\031\005\000\002\032\005\000\002" +
    "\032\003\000\002\032\005\000\002\032\002\000\002\033" +
    "\003\000\002\033\005\000\002\026\003\000\002\005\004" +
    "\000\002\005\002\000\002\122\002\000\002\041\013\000" +
    "\002\042\004\000\002\042\004\000\002\043\003\000\002" +
    "\043\002\000\002\051\005\000\002\051\003\000\002\052" +
    "\004\000\002\052\006\000\002\044\005\000\002\044\004" +
    "\000\002\044\003\000\002\044\002\000\002\123\002\000" +
    "\002\046\005\000\002\047\004\000\002\045\005\000\002" +
    "\045\003\000\002\045\005\000\002\045\002\000\002\050" +
    "\003\000\002\050\005\000\002\053\004\000\002\053\002" +
    "\000\002\054\003\000\002\054\003\000\002\055\003\000" +
    "\002\055\004\000\002\055\004\000\002\055\004\000\002" +
    "\055\004\000\002\055\004\000\002\055\004\000\002\056" +
    "\003\000\002\056\005\000\002\063\003\000\002\063\005" +
    "\000\002\063\006\000\002\063\004\000\002\063\004\000" +
    "\002\124\002\000\002\064\006\000\002\064\003\000\002" +
    "\125\002\000\002\102\005\000\002\106\005\000\002\126" +
    "\002\000\002\127\002\000\002\106\010\000\002\106\002" +
    "\000\002\065\003\000\002\065\005\000\002\061\006\000" +
    "\002\061\010\000\002\062\003\000\002\062\004\000\002" +
    "\060\006\000\002\130\002\000\002\057\014\000\002\066" +
    "\003\000\002\066\002\000\002\067\003\000\002\067\002" +
    "\000\002\070\006\000\002\070\004\000\002\071\006\000" +
    "\002\112\003\000\002\112\005\000\002\113\003\000\002" +
    "\113\005\000\002\111\003\000\002\111\005\000\002\110" +
    "\003\000\002\110\004\000\002\105\003\000\002\131\002" +
    "\000\002\105\006\000\002\103\003\000\002\132\002\000" +
    "\002\103\006\000\002\104\003\000\002\104\005\000\002" +
    "\104\006\000\002\104\003\000\002\104\003\000\002\104" +
    "\003\000\002\104\005\000\002\104\007\000\002\104\004" +
    "\000\002\075\003\000\002\075\003\000\002\075\003\000" +
    "\002\075\003\000\002\075\003\000\002\075\003\000\002" +
    "\074\003\000\002\074\003\000\002\074\003\000\002\072" +
    "\003\000\002\072\003\000\002\076\003\000\002\076\003" +
    "\000\002\077\003\000\002\077\003\000\002\073\003\000" +
    "\002\073\003\000\002\100\003\000\002\100\003\000\002" +
    "\100\003\000\002\101\003\000\002\101\003\000\002\101" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0124\000\004\004\005\001\002\000\004\002\u0126\001" +
    "\002\000\004\034\007\001\002\000\014\003\ufffd\007\ufffd" +
    "\026\ufffd\030\ufffd\034\ufffd\001\002\000\014\003\uffff\007" +
    "\uffff\026\uffff\030\uffff\034\uffff\001\002\000\014\003\017" +
    "\007\012\026\021\030\022\034\013\001\002\000\006\003" +
    "\ufff0\034\ufff0\001\002\000\010\010\uffba\017\uffba\034\uffba" +
    "\001\002\000\066\003\uffe7\007\uffe7\011\uffe7\013\uffe7\014" +
    "\uffe7\020\uffe7\021\uffe7\034\uffe7\040\uffe7\041\uffe7\042\uffe7" +
    "\043\uffe7\044\uffe7\045\uffe7\046\uffe7\051\uffe7\053\uffe7\054" +
    "\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7" +
    "\063\uffe7\064\uffe7\001\002\000\014\003\ufffe\007\ufffe\026" +
    "\ufffe\030\ufffe\034\ufffe\001\002\000\014\003\ufffb\007\ufffb" +
    "\026\ufffb\030\ufffb\034\ufffb\001\002\000\014\003\ufffa\007" +
    "\ufffa\026\ufffa\030\ufffa\034\ufffa\001\002\000\004\011\360" +
    "\001\002\000\014\003\ufffc\007\ufffc\026\ufffc\030\ufffc\034" +
    "\ufffc\001\002\000\004\034\041\001\002\000\004\034\013" +
    "\001\002\000\006\003\ufff9\034\ufff9\001\002\000\006\003" +
    "\025\034\030\001\002\000\006\011\ufff5\014\ufff5\001\002" +
    "\000\006\011\ufff7\014\ufff7\001\002\000\006\011\037\014" +
    "\036\001\002\000\004\052\031\001\002\000\010\031\035" +
    "\032\034\033\032\001\002\000\006\011\ufff3\014\ufff3\001" +
    "\002\000\006\011\ufff4\014\ufff4\001\002\000\006\011\ufff1" +
    "\014\ufff1\001\002\000\006\011\ufff2\014\ufff2\001\002\000" +
    "\004\034\030\001\002\000\014\003\ufff8\007\ufff8\026\ufff8" +
    "\030\ufff8\034\ufff8\001\002\000\006\011\ufff6\014\ufff6\001" +
    "\002\000\006\007\uffe3\027\042\001\002\000\004\034\013" +
    "\001\002\000\004\007\uffe6\001\002\000\004\007\045\001" +
    "\002\000\010\007\uffe1\010\uffe1\034\013\001\002\000\006" +
    "\007\066\010\uffd7\001\002\000\006\003\uffe0\034\uffe0\001" +
    "\002\000\010\007\uffe1\010\uffe1\034\013\001\002\000\006" +
    "\007\uffe2\010\uffe2\001\002\000\006\003\054\034\055\001" +
    "\002\000\006\011\uffdd\014\064\001\002\000\006\007\062" +
    "\011\063\001\002\000\010\011\uffda\014\uffda\020\060\001" +
    "\002\000\004\011\057\001\002\000\010\007\uffdf\010\uffdf" +
    "\034\uffdf\001\002\000\004\021\061\001\002\000\006\011" +
    "\uffd9\014\uffd9\001\002\000\004\011\uffdb\001\002\000\004" +
    "\011\uffdc\001\002\000\006\003\054\034\055\001\002\000" +
    "\004\011\uffde\001\002\000\012\005\uffd5\010\uffd5\017\uffd5" +
    "\034\uffd5\001\002\000\004\010\070\001\002\000\014\003" +
    "\uffe5\007\uffe5\026\uffe5\030\uffe5\034\uffe5\001\002\000\012" +
    "\005\072\010\075\017\uffd1\034\uffd1\001\002\000\006\017" +
    "\uffd2\034\uffd2\001\002\000\012\005\uffd6\010\uffd6\017\uffd6" +
    "\034\uffd6\001\002\000\006\017\100\034\013\001\002\000" +
    "\004\010\uffd8\001\002\000\004\034\356\001\002\000\004" +
    "\012\102\001\002\000\004\034\101\001\002\000\004\012" +
    "\uffcf\001\002\000\006\013\uffcd\034\013\001\002\000\006" +
    "\013\uffcb\014\354\001\002\000\004\034\351\001\002\000" +
    "\004\013\uffce\001\002\000\004\013\107\001\002\000\010" +
    "\003\111\007\uffc5\034\013\001\002\000\010\003\uffc4\011" +
    "\uffc4\034\uffc4\001\002\000\006\007\uffc6\011\335\001\002" +
    "\000\004\007\116\001\002\000\004\011\114\001\002\000" +
    "\010\003\111\007\uffc5\034\013\001\002\000\004\007\uffc8" +
    "\001\002\000\030\003\uffd4\006\uffd4\007\uffd4\010\uffd4\015" +
    "\uffd4\016\uffd4\022\uffd4\023\uffd4\024\uffd4\034\uffd4\037\uffd4" +
    "\001\002\000\030\003\uffa1\006\uffa1\007\uffa1\010\uffa1\015" +
    "\uffa1\016\uffa1\022\uffa1\023\uffa1\024\uffa1\034\uffa1\037\uffa1" +
    "\001\002\000\004\010\334\001\002\000\030\003\143\006" +
    "\125\007\137\010\uffbc\015\142\016\133\022\124\023\141" +
    "\024\135\034\126\037\146\001\002\000\024\012\323\035" +
    "\320\036\322\052\uff90\053\uff90\054\uff90\055\uff90\056\uff90" +
    "\057\uff90\001\002\000\032\003\uff9f\006\uff9f\007\uff9f\010" +
    "\uff9f\015\uff9f\016\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f" +
    "\034\uff9f\037\uff9f\001\002\000\004\012\315\001\002\000" +
    "\004\011\314\001\002\000\072\011\uff8d\012\uff8d\013\uff8d" +
    "\014\uff8d\020\uff8d\021\uff8d\035\uff8d\036\uff8d\040\uff8d\041" +
    "\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d" +
    "\051\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d\056\uff8d\057" +
    "\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d\064\uff8d\001\002" +
    "\000\004\011\302\001\002\000\004\011\301\001\002\000" +
    "\004\011\300\001\002\000\032\003\uffa0\006\uffa0\007\uffa0" +
    "\010\uffa0\015\uffa0\016\uffa0\022\uffa0\023\uffa0\024\uffa0\025" +
    "\uffa0\034\uffa0\037\uffa0\001\002\000\022\011\uff82\012\171" +
    "\031\172\032\155\033\162\034\126\050\160\061\165\001" +
    "\002\000\032\003\uff97\006\uff97\007\uff97\010\uff97\015\uff97" +
    "\016\uff97\022\uff97\023\uff97\024\uff97\025\uff97\034\uff97\037" +
    "\uff97\001\002\000\004\012\274\001\002\000\032\003\uff9e" +
    "\006\uff9e\007\uff9e\010\uff9e\015\uff9e\016\uff9e\022\uff9e\023" +
    "\uff9e\024\uff9e\025\uff9e\034\uff9e\037\uff9e\001\002\000\030" +
    "\003\uffa1\006\uffa1\007\uffa1\010\uffa1\015\uffa1\016\uffa1\022" +
    "\uffa1\023\uffa1\024\uffa1\034\uffa1\037\uffa1\001\002\000\026" +
    "\003\143\006\125\007\137\015\142\016\133\022\124\023" +
    "\141\024\135\034\126\037\146\001\002\000\004\011\265" +
    "\001\002\000\004\012\257\001\002\000\006\011\uff8e\013" +
    "\uff8e\001\002\000\030\003\uffa2\006\uffa2\007\uffa2\010\uffa2" +
    "\015\uffa2\016\uffa2\022\uffa2\023\uffa2\024\uffa2\034\uffa2\037" +
    "\uffa2\001\002\000\004\011\256\001\002\000\004\012\150" +
    "\001\002\000\006\011\uff95\013\uff95\001\002\000\010\003" +
    "\143\011\uff7c\034\126\001\002\000\006\011\uff7d\013\uff7d" +
    "\001\002\000\004\011\153\001\002\000\022\011\uff7a\012" +
    "\171\031\172\032\155\033\162\034\126\050\160\061\165" +
    "\001\002\000\010\011\uff76\013\uff76\040\254\001\002\000" +
    "\056\011\uff63\013\uff63\014\uff63\021\uff63\040\uff63\041\uff63" +
    "\042\uff63\043\uff63\044\uff63\045\uff63\046\uff63\051\uff63\053" +
    "\uff63\054\uff63\055\uff63\056\uff63\057\uff63\060\uff63\061\uff63" +
    "\062\uff63\063\uff63\064\uff63\001\002\000\032\011\uff70\013" +
    "\uff70\014\uff70\021\uff70\040\uff70\041\uff70\042\uff70\043\uff70" +
    "\044\uff70\045\uff70\046\uff70\051\uff70\001\002\000\026\011" +
    "\uff72\013\uff72\040\uff72\041\uff72\042\251\043\246\044\247" +
    "\045\244\046\250\051\245\001\002\000\004\034\013\001" +
    "\002\000\060\011\uff68\012\231\013\uff68\014\uff68\021\uff68" +
    "\040\uff68\041\uff68\042\uff68\043\uff68\044\uff68\045\uff68\046" +
    "\uff68\051\uff68\053\uff68\054\uff68\055\uff68\056\uff68\057\uff68" +
    "\060\uff68\061\uff68\062\uff68\063\uff68\064\uff68\001\002\000" +
    "\056\011\uff65\013\uff65\014\uff65\021\uff65\040\uff65\041\uff65" +
    "\042\uff65\043\uff65\044\uff65\045\uff65\046\uff65\051\uff65\053" +
    "\uff65\054\uff65\055\uff65\056\uff65\057\uff65\060\uff65\061\uff65" +
    "\062\uff65\063\uff65\064\uff65\001\002\000\004\011\224\001" +
    "\002\000\004\011\uff7b\001\002\000\016\012\171\031\172" +
    "\032\155\033\162\034\126\050\160\001\002\000\042\011" +
    "\uff6e\013\uff6e\014\uff6e\021\uff6e\040\uff6e\041\uff6e\042\uff6e" +
    "\043\uff6e\044\uff6e\045\uff6e\046\uff6e\051\uff6e\053\212\054" +
    "\217\060\214\061\213\001\002\000\056\011\uff6b\013\uff6b" +
    "\014\uff6b\021\uff6b\040\uff6b\041\uff6b\042\uff6b\043\uff6b\044" +
    "\uff6b\045\uff6b\046\uff6b\051\uff6b\053\uff6b\054\uff6b\055\205" +
    "\056\202\057\200\060\uff6b\061\uff6b\062\207\063\203\064" +
    "\201\001\002\000\012\011\uff74\013\uff74\040\uff74\041\175" +
    "\001\002\000\020\012\171\031\172\032\155\033\162\034" +
    "\126\050\160\061\165\001\002\000\056\011\uff64\013\uff64" +
    "\014\uff64\021\uff64\040\uff64\041\uff64\042\uff64\043\uff64\044" +
    "\uff64\045\uff64\046\uff64\051\uff64\053\uff64\054\uff64\055\uff64" +
    "\056\uff64\057\uff64\060\uff64\061\uff64\062\uff64\063\uff64\064" +
    "\uff64\001\002\000\004\013\174\001\002\000\056\011\uff62" +
    "\013\uff62\014\uff62\021\uff62\040\uff62\041\uff62\042\uff62\043" +
    "\uff62\044\uff62\045\uff62\046\uff62\051\uff62\053\uff62\054\uff62" +
    "\055\uff62\056\uff62\057\uff62\060\uff62\061\uff62\062\uff62\063" +
    "\uff62\064\uff62\001\002\000\020\012\171\031\172\032\155" +
    "\033\162\034\126\050\160\061\165\001\002\000\010\011" +
    "\uff73\013\uff73\040\uff73\001\002\000\016\012\uff4f\031\uff4f" +
    "\032\uff4f\033\uff4f\034\uff4f\050\uff4f\001\002\000\020\012" +
    "\uff49\031\uff49\032\uff49\033\uff49\034\uff49\050\uff49\061\uff49" +
    "\001\002\000\016\012\uff4c\031\uff4c\032\uff4c\033\uff4c\034" +
    "\uff4c\050\uff4c\001\002\000\020\012\uff4a\031\uff4a\032\uff4a" +
    "\033\uff4a\034\uff4a\050\uff4a\061\uff4a\001\002\000\016\012" +
    "\uff4d\031\uff4d\032\uff4d\033\uff4d\034\uff4d\050\uff4d\001\002" +
    "\000\016\012\uff6a\031\uff6a\032\uff6a\033\uff6a\034\uff6a\050" +
    "\uff6a\001\002\000\020\012\uff4b\031\uff4b\032\uff4b\033\uff4b" +
    "\034\uff4b\050\uff4b\061\uff4b\001\002\000\016\012\uff50\031" +
    "\uff50\032\uff50\033\uff50\034\uff50\050\uff50\001\002\000\016" +
    "\012\uff4e\031\uff4e\032\uff4e\033\uff4e\034\uff4e\050\uff4e\001" +
    "\002\000\016\012\171\031\172\032\155\033\162\034\126" +
    "\050\160\001\002\000\042\011\uff69\013\uff69\014\uff69\021" +
    "\uff69\040\uff69\041\uff69\042\uff69\043\uff69\044\uff69\045\uff69" +
    "\046\uff69\051\uff69\053\uff69\054\uff69\060\uff69\061\uff69\001" +
    "\002\000\020\012\uff52\031\uff52\032\uff52\033\uff52\034\uff52" +
    "\050\uff52\061\uff52\001\002\000\016\012\uff53\031\uff53\032" +
    "\uff53\033\uff53\034\uff53\050\uff53\001\002\000\016\012\uff54" +
    "\031\uff54\032\uff54\033\uff54\034\uff54\050\uff54\001\002\000" +
    "\016\012\uff55\031\uff55\032\uff55\033\uff55\034\uff55\050\uff55" +
    "\001\002\000\016\012\uff6d\031\uff6d\032\uff6d\033\uff6d\034" +
    "\uff6d\050\uff6d\001\002\000\020\012\uff51\031\uff51\032\uff51" +
    "\033\uff51\034\uff51\050\uff51\061\uff51\001\002\000\016\012" +
    "\uff56\031\uff56\032\uff56\033\uff56\034\uff56\050\uff56\001\002" +
    "\000\016\012\171\031\172\032\155\033\162\034\126\050" +
    "\160\001\002\000\032\011\uff6c\013\uff6c\014\uff6c\021\uff6c" +
    "\040\uff6c\041\uff6c\042\uff6c\043\uff6c\044\uff6c\045\uff6c\046" +
    "\uff6c\051\uff6c\001\002\000\032\011\uff6f\013\uff6f\014\uff6f" +
    "\021\uff6f\040\uff6f\041\uff6f\042\uff6f\043\uff6f\044\uff6f\045" +
    "\uff6f\046\uff6f\051\uff6f\001\002\000\010\003\143\013\uff7c" +
    "\034\126\001\002\000\004\013\226\001\002\000\026\003" +
    "\uff7f\006\uff7f\007\uff7f\015\uff7f\016\uff7f\022\uff7f\023\uff7f" +
    "\024\uff7f\034\uff7f\037\uff7f\001\002\000\026\003\143\006" +
    "\125\007\137\015\142\016\133\022\124\023\141\024\135" +
    "\034\126\037\146\001\002\000\032\003\uff7e\006\uff7e\007" +
    "\uff7e\010\uff7e\015\uff7e\016\uff7e\022\uff7e\023\uff7e\024\uff7e" +
    "\025\uff7e\034\uff7e\037\uff7e\001\002\000\022\012\171\013" +
    "\234\031\172\032\155\033\162\034\126\050\160\061\165" +
    "\001\002\000\004\013\237\001\002\000\006\013\uff86\014" +
    "\235\001\002\000\056\011\uff67\013\uff67\014\uff67\021\uff67" +
    "\040\uff67\041\uff67\042\uff67\043\uff67\044\uff67\045\uff67\046" +
    "\uff67\051\uff67\053\uff67\054\uff67\055\uff67\056\uff67\057\uff67" +
    "\060\uff67\061\uff67\062\uff67\063\uff67\064\uff67\001\002\000" +
    "\020\012\171\031\172\032\155\033\162\034\126\050\160" +
    "\061\165\001\002\000\004\013\uff85\001\002\000\056\011" +
    "\uff66\013\uff66\014\uff66\021\uff66\040\uff66\041\uff66\042\uff66" +
    "\043\uff66\044\uff66\045\uff66\046\uff66\051\uff66\053\uff66\054" +
    "\uff66\055\uff66\056\uff66\057\uff66\060\uff66\061\uff66\062\uff66" +
    "\063\uff66\064\uff66\001\002\000\060\011\uff60\013\uff60\014" +
    "\uff60\020\241\021\uff60\040\uff60\041\uff60\042\uff60\043\uff60" +
    "\044\uff60\045\uff60\046\uff60\051\uff60\053\uff60\054\uff60\055" +
    "\uff60\056\uff60\057\uff60\060\uff60\061\uff60\062\uff60\063\uff60" +
    "\064\uff60\001\002\000\020\012\171\031\172\032\155\033" +
    "\162\034\126\050\160\061\165\001\002\000\004\021\243" +
    "\001\002\000\056\011\uff61\013\uff61\014\uff61\021\uff61\040" +
    "\uff61\041\uff61\042\uff61\043\uff61\044\uff61\045\uff61\046\uff61" +
    "\051\uff61\053\uff61\054\uff61\055\uff61\056\uff61\057\uff61\060" +
    "\uff61\061\uff61\062\uff61\063\uff61\064\uff61\001\002\000\020" +
    "\012\uff5b\031\uff5b\032\uff5b\033\uff5b\034\uff5b\050\uff5b\061" +
    "\uff5b\001\002\000\020\012\uff5f\031\uff5f\032\uff5f\033\uff5f" +
    "\034\uff5f\050\uff5f\061\uff5f\001\002\000\020\012\uff5d\031" +
    "\uff5d\032\uff5d\033\uff5d\034\uff5d\050\uff5d\061\uff5d\001\002" +
    "\000\020\012\uff5c\031\uff5c\032\uff5c\033\uff5c\034\uff5c\050" +
    "\uff5c\061\uff5c\001\002\000\020\012\uff5a\031\uff5a\032\uff5a" +
    "\033\uff5a\034\uff5a\050\uff5a\061\uff5a\001\002\000\020\012" +
    "\uff5e\031\uff5e\032\uff5e\033\uff5e\034\uff5e\050\uff5e\061\uff5e" +
    "\001\002\000\020\012\171\031\172\032\155\033\162\034" +
    "\126\050\160\061\165\001\002\000\012\011\uff71\013\uff71" +
    "\040\uff71\041\uff71\001\002\000\020\012\171\031\172\032" +
    "\155\033\162\034\126\050\160\061\165\001\002\000\006" +
    "\011\uff75\013\uff75\001\002\000\032\003\uff9a\006\uff9a\007" +
    "\uff9a\010\uff9a\015\uff9a\016\uff9a\022\uff9a\023\uff9a\024\uff9a" +
    "\025\uff9a\034\uff9a\037\uff9a\001\002\000\020\012\171\031" +
    "\172\032\155\033\162\034\126\050\160\061\165\001\002" +
    "\000\006\013\262\014\261\001\002\000\004\033\263\001" +
    "\002\000\004\011\uff84\001\002\000\004\013\264\001\002" +
    "\000\004\011\uff83\001\002\000\032\003\uff98\006\uff98\007" +
    "\uff98\010\uff98\015\uff98\016\uff98\022\uff98\023\uff98\024\uff98" +
    "\025\uff98\034\uff98\037\uff98\001\002\000\032\003\uffa0\006" +
    "\uffa0\007\uffa0\010\uffa0\015\uffa0\016\uffa0\022\uffa0\023\uffa0" +
    "\024\uffa0\025\270\034\uffa0\037\uffa0\001\002\000\032\003" +
    "\uff78\006\uff78\007\uff78\010\uff78\015\uff78\016\uff78\022\uff78" +
    "\023\uff78\024\uff78\025\uff78\034\uff78\037\uff78\001\002\000" +
    "\006\007\137\024\135\001\002\000\032\003\uff79\006\uff79" +
    "\007\uff79\010\uff79\015\uff79\016\uff79\022\uff79\023\uff79\024" +
    "\uff79\025\uff79\034\uff79\037\uff79\001\002\000\030\003\143" +
    "\006\125\007\137\010\273\015\142\016\133\022\124\023" +
    "\141\024\135\034\126\037\146\001\002\000\032\003\uff96" +
    "\006\uff96\007\uff96\010\uff96\015\uff96\016\uff96\022\uff96\023" +
    "\uff96\024\uff96\025\uff96\034\uff96\037\uff96\001\002\000\020" +
    "\012\171\031\172\032\155\033\162\034\126\050\160\061" +
    "\165\001\002\000\004\013\276\001\002\000\026\003\uff77" +
    "\006\uff77\007\uff77\015\uff77\016\uff77\022\uff77\023\uff77\024" +
    "\uff77\034\uff77\037\uff77\001\002\000\004\011\uff81\001\002" +
    "\000\032\003\uff9c\006\uff9c\007\uff9c\010\uff9c\015\uff9c\016" +
    "\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\034\uff9c\037\uff9c" +
    "\001\002\000\032\003\uff9b\006\uff9b\007\uff9b\010\uff9b\015" +
    "\uff9b\016\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\034\uff9b" +
    "\037\uff9b\001\002\000\032\003\uff9d\006\uff9d\007\uff9d\010" +
    "\uff9d\015\uff9d\016\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d" +
    "\034\uff9d\037\uff9d\001\002\000\072\011\uff87\012\uff87\013" +
    "\uff87\014\uff87\020\uff87\021\uff87\035\uff87\036\uff87\040\uff87" +
    "\041\uff87\042\uff87\043\uff87\044\uff87\045\uff87\046\uff87\047" +
    "\uff87\051\uff87\052\uff87\053\uff87\054\uff87\055\uff87\056\uff87" +
    "\057\uff87\060\uff87\061\uff87\062\uff87\063\uff87\064\uff87\001" +
    "\002\000\072\011\uff8c\012\uff8c\013\uff8c\014\uff8c\020\305" +
    "\021\uff8c\035\uff8c\036\uff8c\040\uff8c\041\uff8c\042\uff8c\043" +
    "\uff8c\044\uff8c\045\uff8c\046\uff8c\047\306\051\uff8c\052\uff8c" +
    "\053\uff8c\054\uff8c\055\uff8c\056\uff8c\057\uff8c\060\uff8c\061" +
    "\uff8c\062\uff8c\063\uff8c\064\uff8c\001\002\000\020\012\uff8a" +
    "\031\uff8a\032\uff8a\033\uff8a\034\uff8a\050\uff8a\061\uff8a\001" +
    "\002\000\004\034\307\001\002\000\072\011\uff8b\012\uff8b" +
    "\013\uff8b\014\uff8b\020\uff8b\021\uff8b\035\uff8b\036\uff8b\040" +
    "\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b" +
    "\047\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b\056" +
    "\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b\063\uff8b\064\uff8b" +
    "\001\002\000\020\012\171\031\172\032\155\033\162\034" +
    "\126\050\160\061\165\001\002\000\004\021\uff89\001\002" +
    "\000\004\021\313\001\002\000\072\011\uff88\012\uff88\013" +
    "\uff88\014\uff88\020\uff88\021\uff88\035\uff88\036\uff88\040\uff88" +
    "\041\uff88\042\uff88\043\uff88\044\uff88\045\uff88\046\uff88\047" +
    "\uff88\051\uff88\052\uff88\053\uff88\054\uff88\055\uff88\056\uff88" +
    "\057\uff88\060\uff88\061\uff88\062\uff88\063\uff88\064\uff88\001" +
    "\002\000\032\003\uff99\006\uff99\007\uff99\010\uff99\015\uff99" +
    "\016\uff99\022\uff99\023\uff99\024\uff99\025\uff99\034\uff99\037" +
    "\uff99\001\002\000\004\034\126\001\002\000\004\013\317" +
    "\001\002\000\004\011\uff80\001\002\000\006\011\uff92\013" +
    "\uff92\001\002\000\016\052\332\053\212\054\217\055\205" +
    "\056\202\057\200\001\002\000\006\011\uff91\013\uff91\001" +
    "\002\000\022\012\171\013\325\031\172\032\155\033\162" +
    "\034\126\050\160\061\165\001\002\000\004\013\326\001" +
    "\002\000\006\011\uff94\013\uff94\001\002\000\006\011\uff93" +
    "\013\uff93\001\002\000\020\012\uff57\031\uff57\032\uff57\033" +
    "\uff57\034\uff57\050\uff57\061\uff57\001\002\000\020\012\uff58" +
    "\031\uff58\032\uff58\033\uff58\034\uff58\050\uff58\061\uff58\001" +
    "\002\000\020\012\171\031\172\032\155\033\162\034\126" +
    "\050\160\061\165\001\002\000\020\012\uff59\031\uff59\032" +
    "\uff59\033\uff59\034\uff59\050\uff59\061\uff59\001\002\000\006" +
    "\011\uff8f\013\uff8f\001\002\000\012\005\uffd3\010\uffd3\017" +
    "\uffd3\034\uffd3\001\002\000\004\007\uffc7\001\002\000\010" +
    "\003\337\011\uffbf\034\342\001\002\000\006\011\uffc1\014" +
    "\347\001\002\000\004\011\uffc3\001\002\000\004\014\345" +
    "\001\002\000\006\014\uffbe\020\343\001\002\000\004\021" +
    "\344\001\002\000\004\014\uffbd\001\002\000\010\003\337" +
    "\011\uffbf\034\342\001\002\000\004\011\uffc2\001\002\000" +
    "\010\003\337\011\uffbf\034\342\001\002\000\004\011\uffc0" +
    "\001\002\000\010\013\uffca\014\uffca\020\352\001\002\000" +
    "\004\021\353\001\002\000\006\013\uffc9\014\uffc9\001\002" +
    "\000\004\034\013\001\002\000\004\013\uffcc\001\002\000" +
    "\004\012\uffd0\001\002\000\004\007\uffe4\001\002\000\014" +
    "\003\uffee\007\uffee\026\uffee\030\uffee\034\uffee\001\002\000" +
    "\010\010\364\017\366\034\013\001\002\000\004\012\371" +
    "\001\002\000\004\034\370\001\002\000\004\002\001\001" +
    "\002\000\010\010\uffbb\017\uffbb\034\uffbb\001\002\000\004" +
    "\034\367\001\002\000\004\012\uffb6\001\002\000\004\012" +
    "\uffb7\001\002\000\006\013\uffb4\034\013\001\002\000\004" +
    "\034\u0117\001\002\000\004\013\uffb5\001\002\000\004\013" +
    "\u0100\001\002\000\006\013\uffb2\014\376\001\002\000\004" +
    "\034\013\001\002\000\004\013\uffb3\001\002\000\010\003" +
    "\u0102\007\uffac\034\013\001\002\000\004\034\uffab\001\002" +
    "\000\006\007\uffad\011\u010b\001\002\000\004\007\u0107\001" +
    "\002\000\004\011\u0105\001\002\000\010\003\u0102\007\uffac" +
    "\034\013\001\002\000\004\007\uffaf\001\002\000\030\003" +
    "\uffb9\006\uffb9\007\uffb9\010\uffb9\015\uffb9\016\uffb9\022\uffb9" +
    "\023\uffb9\024\uffb9\034\uffb9\037\uffb9\001\002\000\030\003" +
    "\uffa1\006\uffa1\007\uffa1\010\uffa1\015\uffa1\016\uffa1\022\uffa1" +
    "\023\uffa1\024\uffa1\034\uffa1\037\uffa1\001\002\000\030\003" +
    "\143\006\125\007\137\010\u010a\015\142\016\133\022\124" +
    "\023\141\024\135\034\126\037\146\001\002\000\010\010" +
    "\uffb8\017\uffb8\034\uffb8\001\002\000\004\007\uffae\001\002" +
    "\000\004\034\u010f\001\002\000\004\011\uffaa\001\002\000" +
    "\010\003\u0112\011\uffa5\014\uffa5\001\002\000\012\003\uffa4" +
    "\011\uffa4\014\uffa4\020\u0110\001\002\000\004\021\u0111\001" +
    "\002\000\010\003\uffa3\011\uffa3\014\uffa3\001\002\000\006" +
    "\011\uffa7\014\uffa7\001\002\000\006\011\uffa9\014\u0114\001" +
    "\002\000\006\003\u0115\034\u010f\001\002\000\006\011\uffa6" +
    "\014\uffa6\001\002\000\006\011\uffa8\014\uffa8\001\002\000" +
    "\010\013\uffb1\014\uffb1\020\u0118\001\002\000\004\021\u0119" +
    "\001\002\000\006\013\uffb0\014\uffb0\001\002\000\006\003" +
    "\u011c\034\u011d\001\002\000\006\011\uffec\014\u0124\001\002" +
    "\000\006\011\uffea\014\u0122\001\002\000\010\011\uffe9\014" +
    "\uffe9\020\u0120\001\002\000\004\011\u011f\001\002\000\014" +
    "\003\uffef\007\uffef\026\uffef\030\uffef\034\uffef\001\002\000" +
    "\004\021\u0121\001\002\000\006\011\uffe8\014\uffe8\001\002" +
    "\000\006\003\u011c\034\u011d\001\002\000\004\011\uffeb\001" +
    "\002\000\006\003\u011c\034\u011d\001\002\000\004\011\uffed" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0124\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\005\001\001\000\004\004\007\001\001\000\002" +
    "\001\001\000\014\006\013\007\017\013\014\016\015\107" +
    "\010\001\001\000\004\115\u0119\001\001\000\004\005\360" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\107\022\001\001\000\004\114" +
    "\023\001\001\000\006\010\026\011\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\042\001\001\000\004\107\356\001\001\000\004\116" +
    "\043\001\001\000\002\001\001\000\010\034\045\035\047" +
    "\107\046\001\001\000\004\020\066\001\001\000\004\117" +
    "\051\001\001\000\010\034\050\035\047\107\046\001\001" +
    "\000\002\001\001\000\006\037\055\040\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\037\064" +
    "\040\052\001\001\000\002\001\001\000\004\036\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\072" +
    "\022\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\076\107\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\024\105\027\104\030\102\107\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\025\111\031\112\107\107\001\001" +
    "\000\004\121\335\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\025\114\031\112\107\107" +
    "\001\001\000\002\001\001\000\004\120\116\001\001\000" +
    "\006\026\117\053\120\001\001\000\002\001\001\000\032" +
    "\054\143\055\131\056\122\057\135\060\144\061\130\062" +
    "\127\063\126\064\146\070\133\071\137\102\121\001\001" +
    "\000\004\124\320\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\125\302\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\102\160\103\165\104\166\105\155\110\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\271\001\001\000\032\054\266\055\265" +
    "\056\122\057\135\060\144\061\130\062\127\063\126\064" +
    "\146\070\133\071\137\102\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\063\150\064\146\066\151\102\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\067\162\102\160\103\165" +
    "\104\166\105\155\110\156\111\167\112\163\113\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\075\251\001\001\000\004\107\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\102\160\103\165\104\166\105\222\001" +
    "\001\000\010\072\215\076\217\077\214\001\001\000\010" +
    "\073\203\100\205\101\176\001\001\000\002\001\001\000" +
    "\014\102\160\103\165\104\166\105\155\110\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\102\160\103\165\104\166\105\155\110\156\111\167" +
    "\113\175\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\132\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\102\160\103\210" +
    "\104\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\131\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\102\160\103\165\104\166\105\221\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\063\150\064\146\066" +
    "\224\102\121\001\001\000\002\001\001\000\004\130\226" +
    "\001\001\000\032\054\227\055\131\056\122\057\135\060" +
    "\144\061\130\062\127\063\126\064\146\070\133\071\137" +
    "\102\121\001\001\000\002\001\001\000\016\065\231\102" +
    "\160\103\165\104\166\105\155\110\232\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\065" +
    "\235\102\160\103\165\104\166\105\155\110\232\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\102\160\103\165\104\166\105\155\110\241\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\102\160\103\165\104" +
    "\166\105\155\110\252\001\001\000\002\001\001\000\022" +
    "\102\160\103\165\104\166\105\155\110\156\111\167\112" +
    "\254\113\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\102\160\103\165\104\166\105\155\110\257\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\056\270\070\133" +
    "\071\137\001\001\000\002\001\001\000\032\054\143\055" +
    "\131\056\122\057\135\060\144\061\130\062\127\063\126" +
    "\064\146\070\133\071\137\102\121\001\001\000\002\001" +
    "\001\000\022\102\160\103\165\104\166\105\155\110\156" +
    "\111\167\112\274\113\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\106\303\001\001\000" +
    "\002\001\001\000\004\126\307\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\102\160\103\165\104\166\105" +
    "\155\110\310\001\001\000\004\127\311\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\102" +
    "\315\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\074\330\077\327\101\326\001\001\000" +
    "\002\001\001\000\016\065\323\102\160\103\165\104\166" +
    "\105\155\110\232\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\102\160\103\165\104\166\105\155\110\332\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\032\337\033\340\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\032" +
    "\345\033\340\001\001\000\002\001\001\000\006\032\347" +
    "\033\340\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\027\354\030\102" +
    "\107\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\041\364\042\361" +
    "\107\362\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\043\373\051\372\052" +
    "\374\107\371\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\051\376\052" +
    "\374\107\371\001\001\000\002\001\001\000\010\044\u0102" +
    "\046\u0103\107\u0100\001\001\000\004\123\u010b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\044\u0105\046\u0103\107\u0100\001\001\000\002\001\001\000" +
    "\004\122\u0107\001\001\000\004\053\u0108\001\001\000\032" +
    "\054\143\055\131\056\122\057\135\060\144\061\130\062" +
    "\127\063\126\064\146\070\133\071\137\102\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\047\u010c\050" +
    "\u010d\001\001\000\002\001\001\000\004\045\u0112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\u0115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\u011d\015\u011a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\u0122\015\u011a\001\001\000" +
    "\002\001\001\000\006\014\u0124\015\u011a\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  Tab.init(); 

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    Symbol s = this.getScanner().next_token();
    if (s != null && s.value != null) 
            log.info(s.toString() + " " + s.value.toString());
    return s;

    }

	
    ParserActionImplementer impl = new ParserActionImplementer() ;	
    int printCallCount = 0;
    boolean errorDetected = false;

    Logger log = Logger.getLogger(getClass());
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      impl.reportError(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        impl.reportError("\nSyntax error : ", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        impl.reportFatalError("Error : parsing has to be stopped", cur_token);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


    ParserActionImplementer impl = new ParserActionImplementer() ;	

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // MulopRight ::= ASSIGNMOD 
            {
              Integer RESULT =null;
		 RESULT = new Integer(100+Code.rem); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // MulopRight ::= ASSIGNDIV 
            {
              Integer RESULT =null;
		 RESULT = new Integer(100+Code.div); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // MulopRight ::= ASSIGNMUL 
            {
              Integer RESULT =null;
		 RESULT = new Integer(100+Code.mul); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // MulopLeft ::= MOD 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.rem); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // MulopLeft ::= DIV 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.div); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // MulopLeft ::= MUL 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.mul); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // Mulop ::= MulopRight 
            {
              Integer RESULT =null;
		int mulopRightleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mulopRightright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer mulopRight = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = mulopRight; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // Mulop ::= MulopLeft 
            {
              Integer RESULT =null;
		int mulopLeftleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mulopLeftright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer mulopLeft = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = mulopLeft; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // AddopRight ::= ASSIGNMINUS 
            {
              Integer RESULT =null;
		 RESULT = new Integer(100+Code.sub); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // AddopRight ::= ASSIGNPLUS 
            {
              Integer RESULT =null;
		 RESULT = new Integer(100+Code.add); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // AddopLeft ::= SUB 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.sub); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // AddopLeft ::= ADD 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.add); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Addop ::= AddopRight 
            {
              Integer RESULT =null;
		int addopRightleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int addopRightright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer addopRight = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = addopRight; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Addop ::= AddopLeft 
            {
              Integer RESULT =null;
		int addopLeftleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int addopLeftright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer addopLeft = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = addopLeft; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Assignop ::= MulopRight 
            {
              Integer RESULT =null;
		int addopRightleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int addopRightright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer addopRight = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = addopRight; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Assignop ::= AddopRight 
            {
              Integer RESULT =null;
		int addopLeftleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int addopLeftright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer addopLeft = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = addopLeft; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Assignop ::= ASSIGN 
            {
              Integer RESULT =null;
		 RESULT = new Integer(0); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Relop ::= LEQ 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.le); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Relop ::= LT 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.lt); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Relop ::= GEQ 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.ge); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Relop ::= GT 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.gt); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Relop ::= NEQ 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.ne); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Relop ::= EQ 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.eq); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Factor ::= NEW Type 
            {
              Obj RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Factor ::= NEW Type LBRACK Expr RBRACK 
            {
              Obj RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT = impl.factorNewArray(type, expr, typeleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Factor ::= LPAREN Expr RPAREN 
            {
              Obj RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT = impl.factorNewExpr(expr, exprleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Factor ::= BOOL 
            {
              Obj RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = impl.factorNewBool(bool,boolleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Factor ::= CHAR 
            {
              Obj RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = impl.factorNewChar(c,cleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Factor ::= NUMBER 
            {
              Obj RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = impl.factorNewNumber(num, numleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Factor ::= Designator LPAREN ActPars RPAREN 
            {
              Obj RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT = impl.factorNewMethod(des, desleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Factor ::= Designator LPAREN RPAREN 
            {
              Obj RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT = impl.factorNewMethod(des, desleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Factor ::= Designator 
            {
              Obj RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = impl.factorNewDesignator(des, desleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Term ::= Factor Mulop NT$14 Term 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int factorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj factor = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int mulopleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int mulopright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer mulop = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = impl.mul(factor, mulop, term, termleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$14 ::= 
            {
              Obj RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj factor = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int mulopleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mulopright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer mulop = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.mulOpOccured++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$14",88, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Term ::= Factor 
            {
              Obj RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj factor = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = factor; impl.termCheckFactorForArray(factor); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // TermList ::= Term Addop NT$13 TermList 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int addopleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int addopright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer addop = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int termListleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termListright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj termList = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = impl.add(term, addop, termList, termleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermList",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NT$13 ::= 
            {
              Obj RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int addopleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int addopright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer addop = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.addOpOccured++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$13",87, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // TermList ::= Term 
            {
              Obj RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = term; impl.termListCheckTermForArray(term); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermList",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Expr ::= SUB TermList 
            {
              Struct RESULT =null;
		int termListleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termListright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj termList = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = termList.getType(); Code.put(Code.neg); impl.factorComesFromDesignator = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",70, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Expr ::= TermList 
            {
              Struct RESULT =null;
		int termListleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termListright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj termList = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = termList.getType(); impl.factorComesFromDesignator = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",70, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ConditionFact ::= Expr Relop Expr 
            {
              Struct RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct expr1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int relopleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int relopright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer relop = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct expr2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = impl.compareTypes(expr1, expr2, expr1left); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionFact",71, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ConditionFact ::= Expr 
            {
              Struct RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionFact",71, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ConditionTerm ::= ConditionFact AND ConditionTerm 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionTerm",73, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ConditionTerm ::= ConditionFact 
            {
              Struct RESULT =null;
		int conditionFactleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int conditionFactright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct conditionFact = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = conditionFact; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionTerm",73, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Condition ::= ConditionTerm OR Condition 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",72, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Condition ::= ConditionTerm 
            {
              Struct RESULT =null;
		int conditionTermleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int conditionTermright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct conditionTerm = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = conditionTerm; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",72, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // IfCondition ::= IF LPAREN Condition RPAREN 
            {
              Object RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct condition = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 impl.statementCheckIfCondition(condition, conditionleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfCondition",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // IfStatement ::= IfCondition Statement 
            {
              Object RESULT =null;
		int ifConditionleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int ifConditionright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object ifCondition = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int ifStatementleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int ifStatementright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object ifStatement = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfStatement",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // IfStatement ::= IfCondition StatementMatched ELSE StatementUnmatched 
            {
              Object RESULT =null;
		int ifConditionleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int ifConditionright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Object ifCondition = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int ifStatementleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int ifStatementright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object ifStatement = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int elseStatementleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int elseStatementright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object elseStatement = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfStatement",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ForStatementConditionExtension ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForStatementConditionExtension",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ForStatementConditionExtension ::= Condition 
            {
              Object RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct condition = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.statementCheckForCondition(condition, conditionleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForStatementConditionExtension",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ForStatementDesignatorExtension ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForStatementDesignatorExtension",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ForStatementDesignatorExtension ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForStatementDesignatorExtension",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ForStatement ::= FOR LPAREN ForStatementDesignatorExtension SEMI ForStatementConditionExtension SEMI ForStatementDesignatorExtension RPAREN NT$12 Statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 impl.forLoopEnd(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForStatement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$12 ::= 
            {
              Object RESULT =null;
 impl.forLoopStart(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$12",86, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ReadStatement ::= READ LPAREN Designator RPAREN 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 impl.statementCheckRead(des, desleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReadStatement",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ReturnStatement ::= RETURN Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.markReturn(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ReturnStatement ::= RETURN 
            {
              Object RESULT =null;
		 impl.markReturn(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // PrintStatement ::= PRINT LPAREN Expr COMMA NUMBER RPAREN 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 impl.statementCheckPrint(expr, num, exprleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("PrintStatement",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // PrintStatement ::= PRINT LPAREN Expr RPAREN 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 impl.statementCheckPrint(expr, 1, exprleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("PrintStatement",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ActPars ::= Expr COMMA ActPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ActPars ::= Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DesignatorExtension ::= 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorExtension",68, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DesignatorExtension ::= DesignatorExtension LBRACK NT$10 Expr NT$11 RBRACK 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int lbrackleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int lbrackright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object lbrack = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorExtension",68, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$11 ::= 
            {
              Obj RESULT =(Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int lbrackleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lbrackright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object lbrack = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.checkIfInt(expr, exprleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$11",85, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$10 ::= 
            {
              Obj RESULT =null;
		int lbrackleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lbrackright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object lbrack = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 RESULT = impl.designatorExtensionResolveArray(lbrackleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$10",84, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DesignatorExtension ::= DesignatorExtension DOT IDENT 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorExtension",68, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Designator ::= IDENT NT$9 DesignatorExtension 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int designatorExtensionleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int designatorExtensionright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj designatorExtension = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = impl.designatorResolveIdentificator(ident, designatorExtension, identleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$9 ::= 
            {
              Obj RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.setDesignatorArrayExtension(ident, identleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$9",83, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DesignatorAssign ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.reportInfo("Successful error recovery. Line ", errleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorAssign",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DesignatorAssign ::= Designator NT$8 Assignop Expr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct expr = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = impl.assign(des, op, expr, desleft); impl.inAssign = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorAssign",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$8 ::= 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.inAssign = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$8",82, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DesignatorStatement ::= Designator DEC 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = impl.designatorDec(des, desleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DesignatorStatement ::= Designator INC 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int incright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object inc = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = impl.designatorInc(des, desleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DesignatorStatement ::= Designator LPAREN ActPars RPAREN 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DesignatorStatement ::= Designator LPAREN RPAREN 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT = impl.designatorCallMethod(des, null, desleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DesignatorStatement ::= DesignatorAssign 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // StatementUnmatched ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // StatementUnmatched ::= IfStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // StatementMatched ::= BREAK SEMI 
            {
              Object RESULT =null;
		int brkleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int brkright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object brk = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 impl.statementCheckBreak(brkleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // StatementMatched ::= CONTINUE SEMI 
            {
              Object RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object cont = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 impl.statementCheckContinue(contleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // StatementMatched ::= ReadStatement SEMI 
            {
              Object RESULT =null;
		int readStatementleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int readStatementright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object readStatement = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // StatementMatched ::= ReturnStatement SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // StatementMatched ::= PrintStatement SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // StatementMatched ::= DesignatorStatement SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // StatementMatched ::= ForStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Statement ::= StatementUnmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Statement ::= StatementMatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // MethodVar ::= IDENT LBRACK RBRACK 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 impl.addVar(varName, varNameleft, SymbolOrigin.LOCAL, true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVar",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // MethodVar ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.addVar(varName, varNameleft, SymbolOrigin.LOCAL, false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVar",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // MethodVarListAdditional ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarListAdditional",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // MethodVarListAdditional ::= MethodVarListAdditional COMMA error 
            {
              Object RESULT =null;
		int methodVarListAdditionalleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int methodVarListAdditionalright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object methodVarListAdditional = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 impl.reportInfo("Successful error recovery. Line ", methodVarListAdditionalleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarListAdditional",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // MethodVarListAdditional ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.reportInfo("Successful error recovery. Line ", errleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarListAdditional",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // MethodVarListAdditional ::= MethodVarListAdditional COMMA MethodVar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarListAdditional",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // MethodVarList ::= MethodVar MethodVarListAdditional 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // MethodVarDecl ::= Type NT$7 MethodVarList 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methodVarTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int methodVarTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct methodVarType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarDecl",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$7 ::= 
            {
              Object RESULT =null;
		int methodVarTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methodVarTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct methodVarType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.currentVarType = methodVarType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",81, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // MethodVarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarDeclList",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // MethodVarDeclList ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.reportInfo("Successful error recovery on line ", errleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarDeclList",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // MethodVarDeclList ::= error SEMI 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 impl.reportInfo("Successful error recovery on line ", errleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarDeclList",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // MethodVarDeclList ::= MethodVarDecl SEMI MethodVarDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarDeclList",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FormalParamDecl ::= Type IDENT LBRACK RBRACK 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 impl.currentVarType = type; impl.addVar(name, nameleft, SymbolOrigin.UNIMPORTANT, true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FormalParamDecl ::= Type IDENT 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.currentVarType = type; impl.addVar(name, nameleft, SymbolOrigin.UNIMPORTANT, false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FormalParamList ::= FormalParamDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FormalParamList ::= FormalParamDecl COMMA FormalParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FormPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FormPars ::= FormalParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // MethodReturnType ::= VOID IDENT 
            {
              Object RESULT =null;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.currentMethodName=methodName; impl.currentMethodType = null; impl.currentMethodNameLine=methodNameleft;  impl.addMethod(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodReturnType",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MethodReturnType ::= Type IDENT 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.currentMethodName=methodName; impl.currentMethodType = type; impl.currentMethodNameLine=methodNameleft; impl.addMethod(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodReturnType",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MethodDecl ::= MethodReturnType LPAREN FormPars RPAREN MethodVarDeclList LBRACE NT$6 StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int methodReturnTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int methodReturnTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Object methodReturnType = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		 impl.methodEnd(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$6 ::= 
            {
              Object RESULT =null;
		int methodReturnTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int methodReturnTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Object methodReturnType = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
 impl.methodStart(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",80, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // MethodList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // MethodList ::= MethodList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ClassStatementList ::= StatementList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassStatementList",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ClassMethodVar ::= IDENT LBRACK RBRACK 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 impl.addVar(varName, varNameleft, SymbolOrigin.UNIMPORTANT, true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVar",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ClassMethodVar ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.addVar(varName, varNameleft, SymbolOrigin.UNIMPORTANT, false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVar",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ClassMethodVarList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVarList",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ClassMethodVarList ::= error COMMA ClassMethodVarList 
            {
              Object RESULT =null;
		int classMethodVarListleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classMethodVarListright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object classMethodVarList = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.reportInfo("Successful error recovery. Line ", classMethodVarListleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVarList",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ClassMethodVarList ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.reportInfo("Successful error recovery. Line ", errleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVarList",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ClassMethodVarList ::= ClassMethodVar COMMA ClassMethodVarList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVarList",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ClassMethodVarDecl ::= Type NT$5 ClassMethodVarList 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVarDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$5 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.currentVarType = type; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",79, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ClassMethodVarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVarDeclList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ClassMethodVarDeclList ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.reportInfo("Successful error recovery on line ", errleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVarDeclList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ClassMethodVarDeclList ::= error SEMI 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 impl.reportInfo("Successful error recovery on line ", errleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVarDeclList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ClassMethodVarDeclList ::= ClassMethodVarDecl SEMI ClassMethodVarDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodVarDeclList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ClassFormalParamDecl ::= Type IDENT LBRACK RBRACK 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 impl.currentVarType = type; impl.addVar(varName, varNameleft, SymbolOrigin.UNIMPORTANT, true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassFormalParamDecl",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ClassFormalParamDecl ::= Type IDENT 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.currentVarType = type; impl.addVar(varName, varNameleft, SymbolOrigin.UNIMPORTANT, false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassFormalParamDecl",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ClassFormalParamList ::= ClassFormalParamDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassFormalParamList",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ClassFormalParamList ::= ClassFormalParamDecl COMMA ClassFormalParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassFormalParamList",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ClassFormPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassFormPars",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ClassFormPars ::= ClassFormalParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassFormPars",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ClassMethodReturnType ::= VOID IDENT 
            {
              Object RESULT =null;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.currentMethodName=methodName; impl.currentMethodType = null; impl.currentMethodNameLine=methodNameleft;  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodReturnType",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ClassMethodReturnType ::= Type IDENT 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.currentMethodName=methodName; impl.currentMethodType = type; impl.currentMethodNameLine=methodNameleft;  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodReturnType",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ClassMethodStatic ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodStatic",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ClassMethodStatic ::= STATIC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodStatic",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ClassMethodDecl ::= ClassMethodStatic ClassMethodReturnType LPAREN ClassFormPars RPAREN ClassMethodVarDeclList LBRACE NT$4 ClassStatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 impl.methodEnd(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodDecl",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$4 ::= 
            {
              Object RESULT =null;
 impl.addMethod(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",78, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ClassMethodList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodList",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ClassMethodList ::= ClassMethodList ClassMethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodList",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ClassMethodListOptional ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodListOptional",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ClassMethodListOptional ::= LBRACE ClassMethodList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodListOptional",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ClassVar ::= IDENT LBRACK RBRACK 
            {
              Object RESULT =null;
		int classVarNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int classVarNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String classVarName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 impl.addVar(classVarName, classVarNameleft, SymbolOrigin.LOCAL, true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVar",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ClassVar ::= IDENT 
            {
              Object RESULT =null;
		int classVarNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classVarNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String classVarName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.addVar(classVarName, classVarNameleft, SymbolOrigin.LOCAL, false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVar",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ClassVarList ::= error LBRACE 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 impl.reportInfo("Successful error recovery. Line ", errleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarList",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ClassVarList ::= error SEMI 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 impl.reportInfo("Successful error recovery. Line ", errleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarList",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ClassVarList ::= ClassVar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarList",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClassVarList ::= ClassVar COMMA ClassVarList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarList",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassVarDecl ::= Type NT$3 ClassVarList SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int classVarTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int classVarTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct classVarType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDecl",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$3 ::= 
            {
              Object RESULT =null;
		int classVarTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classVarTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct classVarType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.currentVarType = classVarType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",77, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassVarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDeclList",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassVarDeclList ::= ClassVarDecl ClassVarDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDeclList",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassExtended ::= 
            {
              Object RESULT =null;
		 impl.currentClassParent = null; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassExtended",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassExtended ::= EXTENDS Type 
            {
              Object RESULT =null;
		int parentleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int parentright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct parent = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.currentClassParent = parent; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassExtended",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassDecl ::= CLASS IDENT ClassExtended NT$2 LBRACE ClassVarDeclList ClassMethodListOptional RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int classExtendedleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int classExtendedright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Object classExtended = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		 impl.classEnd(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$2 ::= 
            {
              Object RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int classExtendedleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classExtendedright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object classExtended = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.classStart(className, classExtendedleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",76, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = impl.resolveType(typeName, typeNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",69, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // GlobalVar ::= IDENT LBRACK RBRACK 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 impl.addVar(varName, varNameleft, SymbolOrigin.GLOBAL, true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVar",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // GlobalVar ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.addVar(varName, varNameleft, SymbolOrigin.GLOBAL, false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVar",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // GlobalVarList ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.reportInfo("Successful error recovery. Line", errleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // GlobalVarList ::= error COMMA GlobalVarList 
            {
              Object RESULT =null;
		int globalVarListleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int globalVarListright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object globalVarList = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.reportInfo("Successful error recovery. Line ", globalVarListleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // GlobalVarList ::= GlobalVar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // GlobalVarList ::= GlobalVar COMMA GlobalVarList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // GlobalVarDecl ::= error SEMI 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 impl.reportInfo("Successful error recovery. Line ", errleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDecl",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // GlobalVarDecl ::= Type NT$1 GlobalVarList SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDecl",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$1 ::= 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.currentVarType = varType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",75, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConstType ::= BOOL 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = bool; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstType",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstType ::= CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = c; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstType",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstType ::= NUMBER 
            {
              Object RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer number = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = number; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstType",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Constant ::= IDENT ASSIGN ConstType 
            {
              Object RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int constValueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constValueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object constValue = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.addConst(constName, constValue, constNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstList ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.reportError("Successful error recovery on line ", errleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstList ::= ConstList COMMA Constant 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstList ::= Constant 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDecl ::= CONST Type NT$0 ConstList SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.currentConstType = type; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",74, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GlobalParameterType ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalParameterType",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalParameterType ::= GlobalVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalParameterType",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GlobalParameterType ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalParameterType",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GlobalParameterList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalParameterList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // GlobalParameterList ::= GlobalParameterList GlobalParameterType 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalParameterList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramName ::= IDENT 
            {
              Object RESULT =null;
		int progNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int progNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String progName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = Tab.insert(Obj.Prog, progName.toString(), Tab.noType); impl.programStart(progName); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramName",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG ProgramName GlobalParameterList LBRACE MethodList RBRACE 
            {
              Object RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object pName = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		 impl.programEnd(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

