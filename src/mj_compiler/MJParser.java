
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Dec 22 21:36:28 CET 2016
//----------------------------------------------------

package mj_compiler;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import utils.ParserActionImplementer;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Dec 22 21:36:28 CET 2016
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\200\000\002\002\010\000\002\002\004\000\002\003" +
    "\003\000\002\004\004\000\002\004\002\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\007\006\000" +
    "\002\010\004\000\002\012\005\000\002\012\002\000\002" +
    "\011\005\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\014\005\000\002\015\005\000\002\015\003" +
    "\000\002\015\003\000\002\015\005\000\002\016\003\000" +
    "\002\016\005\000\002\031\003\000\002\017\011\000\002" +
    "\020\004\000\002\020\002\000\002\021\003\000\002\021" +
    "\002\000\002\022\005\000\002\022\002\000\002\005\004" +
    "\000\002\005\002\000\002\023\013\000\002\024\003\000" +
    "\002\024\002\000\002\025\004\000\002\025\004\000\002" +
    "\026\003\000\002\026\002\000\002\027\005\000\002\027" +
    "\003\000\002\030\004\000\002\030\006\000\002\032\004" +
    "\000\002\032\002\000\002\033\003\000\002\033\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\004\000\002\034" +
    "\004\000\002\035\005\000\002\035\003\000\002\042\004" +
    "\000\002\044\004\000\002\044\005\000\002\044\003\000" +
    "\002\044\003\000\002\045\003\000\002\045\002\000\002" +
    "\040\010\000\002\047\004\000\002\047\002\000\002\041" +
    "\004\000\002\041\005\000\002\037\007\000\002\036\014" +
    "\000\002\050\003\000\002\050\002\000\002\051\003\000" +
    "\002\051\002\000\002\055\006\000\002\055\004\000\002" +
    "\056\006\000\002\052\003\000\002\052\005\000\002\053" +
    "\003\000\002\053\005\000\002\054\003\000\002\054\005" +
    "\000\002\061\003\000\002\061\003\000\002\061\003\000" +
    "\002\061\003\000\002\061\003\000\002\061\003\000\002" +
    "\043\003\000\002\071\003\000\002\071\005\000\002\072" +
    "\003\000\002\072\006\000\002\060\003\000\002\060\005" +
    "\000\002\057\003\000\002\057\004\000\002\046\003\000" +
    "\002\073\003\000\002\073\005\000\002\074\003\000\002" +
    "\075\003\000\002\075\005\000\002\076\003\000\002\076" +
    "\003\000\002\076\006\000\002\076\005\000\002\076\003" +
    "\000\002\076\003\000\002\076\005\000\002\076\007\000" +
    "\002\076\004\000\002\063\003\000\002\063\003\000\002" +
    "\064\003\000\002\064\003\000\002\065\003\000\002\065" +
    "\003\000\002\066\003\000\002\066\003\000\002\067\003" +
    "\000\002\067\003\000\002\067\003\000\002\070\003\000" +
    "\002\070\003\000\002\070\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\004\004\005\001\002\000\004\002\322\001" +
    "\002\000\004\037\007\001\002\000\012\007\ufffd\031\ufffd" +
    "\033\ufffd\037\ufffd\001\002\000\012\007\uffff\031\uffff\033" +
    "\uffff\037\uffff\001\002\000\012\007\012\031\020\033\021" +
    "\037\013\001\002\000\006\003\044\037\046\001\002\000" +
    "\012\005\uffe1\010\uffe1\022\uffe1\037\uffe1\001\002\000\110" +
    "\003\uffea\006\uffea\007\uffea\010\uffea\011\uffea\013\uffea\014" +
    "\uffea\015\uffea\016\uffea\017\uffea\020\uffea\023\uffea\024\uffea" +
    "\025\uffea\026\uffea\027\uffea\030\uffea\037\uffea\042\uffea\043" +
    "\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea" +
    "\054\uffea\056\uffea\057\uffea\060\uffea\061\uffea\062\uffea\065" +
    "\uffea\066\uffea\067\uffea\001\002\000\012\007\ufffe\031\ufffe" +
    "\033\ufffe\037\ufffe\001\002\000\012\007\ufffb\031\ufffb\033" +
    "\ufffb\037\ufffb\001\002\000\012\007\ufffa\031\ufffa\033\ufffa" +
    "\037\ufffa\001\002\000\012\007\ufffc\031\ufffc\033\ufffc\037" +
    "\ufffc\001\002\000\004\037\040\001\002\000\004\037\013" +
    "\001\002\000\004\037\025\001\002\000\006\011\ufff6\014" +
    "\034\001\002\000\004\011\033\001\002\000\004\054\026" +
    "\001\002\000\010\034\032\035\031\036\030\001\002\000" +
    "\006\011\ufff5\014\ufff5\001\002\000\006\011\ufff4\014\ufff4" +
    "\001\002\000\006\011\ufff2\014\ufff2\001\002\000\006\011" +
    "\ufff3\014\ufff3\001\002\000\012\007\ufff9\031\ufff9\033\ufff9" +
    "\037\ufff9\001\002\000\004\037\025\001\002\000\004\011" +
    "\ufff8\001\002\000\006\011\ufff6\014\034\001\002\000\004" +
    "\011\ufff7\001\002\000\006\007\uffe7\032\041\001\002\000" +
    "\004\037\013\001\002\000\004\007\043\001\002\000\012" +
    "\003\044\007\uffe5\010\uffe5\037\046\001\002\000\012\007" +
    "\uffee\010\uffee\011\uffee\014\313\001\002\000\006\007\055" +
    "\010\uffe3\001\002\000\014\007\uffec\010\uffec\011\uffec\014" +
    "\uffec\023\053\001\002\000\006\007\uffe6\010\uffe6\001\002" +
    "\000\012\007\uffef\010\uffef\011\uffef\014\051\001\002\000" +
    "\006\003\044\037\046\001\002\000\010\007\ufff0\010\ufff0" +
    "\011\ufff0\001\002\000\004\024\054\001\002\000\012\007" +
    "\uffeb\010\uffeb\011\uffeb\014\uffeb\001\002\000\012\005\uffe1" +
    "\010\uffe1\022\uffe1\037\uffe1\001\002\000\004\010\057\001" +
    "\002\000\012\007\uffe9\031\uffe9\033\uffe9\037\uffe9\001\002" +
    "\000\012\005\061\010\062\022\uffde\037\uffde\001\002\000" +
    "\006\022\uffdf\037\uffdf\001\002\000\004\010\uffe4\001\002" +
    "\000\006\022\067\037\013\001\002\000\012\005\uffe2\010" +
    "\uffe2\022\uffe2\037\uffe2\001\002\000\004\012\072\001\002" +
    "\000\004\037\071\001\002\000\004\037\070\001\002\000" +
    "\004\012\uffdc\001\002\000\004\012\uffdd\001\002\000\006" +
    "\013\uffda\037\013\001\002\000\004\037\310\001\002\000" +
    "\004\013\uffdb\001\002\000\004\013\101\001\002\000\006" +
    "\013\uffd8\014\077\001\002\000\004\037\013\001\002\000" +
    "\004\013\uffd9\001\002\000\004\037\013\001\002\000\004" +
    "\007\103\001\002\000\026\006\uffd4\007\uffd4\010\uffd4\015" +
    "\uffd4\016\uffd4\025\uffd4\026\uffd4\027\uffd4\037\uffd4\042\uffd4" +
    "\001\002\000\026\006\111\007\124\010\114\015\130\016" +
    "\120\025\110\026\126\027\122\037\112\042\133\001\002" +
    "\000\114\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013" +
    "\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\024\uffa6" +
    "\025\uffa6\026\uffa6\027\uffa6\030\uffa6\037\uffa6\040\uffa6\041" +
    "\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6" +
    "\050\uffa6\051\uffa6\052\uffa6\054\uffa6\056\uffa6\057\uffa6\060" +
    "\uffa6\061\uffa6\062\uffa6\065\uffa6\066\uffa6\067\uffa6\001\002" +
    "\000\010\012\303\040\301\041\302\001\002\000\032\006" +
    "\uffd2\007\uffd2\010\uffd2\011\uffd2\015\uffd2\016\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\037\uffd2\042\uffd2\001\002\000" +
    "\004\012\273\001\002\000\004\011\272\001\002\000\116" +
    "\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\014" +
    "\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\023\267\024\uffa4" +
    "\025\uffa4\026\uffa4\027\uffa4\030\uffa4\037\uffa4\040\uffa4\041" +
    "\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4" +
    "\050\uffa4\051\uffa4\052\uffa4\054\uffa4\056\uffa4\057\uffa4\060" +
    "\uffa4\061\uffa4\062\uffa4\065\uffa4\066\uffa4\067\uffa4\001\002" +
    "\000\032\006\uffd0\007\uffd0\010\uffd0\011\uffd0\015\uffd0\016" +
    "\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\037\uffd0\042\uffd0" +
    "\001\002\000\012\005\uffe0\010\uffe0\022\uffe0\037\uffe0\001" +
    "\002\000\032\006\uffce\007\uffce\010\uffce\011\uffce\015\uffce" +
    "\016\uffce\025\uffce\026\uffce\027\uffce\030\uffce\037\uffce\042" +
    "\uffce\001\002\000\032\006\uffcf\007\uffcf\010\uffcf\011\uffcf" +
    "\015\uffcf\016\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\037" +
    "\uffcf\042\uffcf\001\002\000\032\006\uffd3\007\uffd3\010\uffd3" +
    "\011\uffd3\015\uffd3\016\uffd3\025\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\037\uffd3\042\uffd3\001\002\000\022\011\265\012\146" +
    "\020\151\034\143\035\154\036\150\037\112\053\153\001" +
    "\002\000\032\006\uffc9\007\uffc9\010\uffc9\011\uffc9\015\uffc9" +
    "\016\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\037\uffc9\042" +
    "\uffc9\001\002\000\004\012\261\001\002\000\032\006\uffd1" +
    "\007\uffd1\010\uffd1\011\uffd1\015\uffd1\016\uffd1\025\uffd1\026" +
    "\uffd1\027\uffd1\030\uffd1\037\uffd1\042\uffd1\001\002\000\026" +
    "\006\uffd4\007\uffd4\010\uffd4\015\uffd4\016\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\037\uffd4\042\uffd4\001\002\000\024\006\111" +
    "\007\124\015\130\016\120\025\110\026\126\027\122\037" +
    "\112\042\133\001\002\000\004\011\253\001\002\000\114" +
    "\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014" +
    "\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\024\uffa7\025\uffa7" +
    "\026\uffa7\027\uffa7\030\uffa7\037\uffa7\040\uffa7\041\uffa7\042" +
    "\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7" +
    "\051\uffa7\052\251\054\uffa7\056\uffa7\057\uffa7\060\uffa7\061" +
    "\uffa7\062\uffa7\065\uffa7\066\uffa7\067\uffa7\001\002\000\004" +
    "\012\242\001\002\000\026\006\uffd5\007\uffd5\010\uffd5\015" +
    "\uffd5\016\uffd5\025\uffd5\026\uffd5\027\uffd5\037\uffd5\042\uffd5" +
    "\001\002\000\032\006\uffcd\007\uffcd\010\uffcd\011\uffcd\015" +
    "\uffcd\016\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\037\uffcd" +
    "\042\uffcd\001\002\000\004\012\134\001\002\000\006\011" +
    "\uffb9\037\112\001\002\000\006\011\uffba\013\uffba\001\002" +
    "\000\004\011\137\001\002\000\022\011\uffb7\012\146\020" +
    "\151\034\143\035\154\036\150\037\112\053\153\001\002" +
    "\000\106\006\uff97\007\uff97\010\uff97\011\uff97\012\232\013" +
    "\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97\024\uff97" +
    "\025\uff97\026\uff97\027\uff97\030\uff97\037\uff97\042\uff97\043" +
    "\uff97\044\uff97\045\uff97\046\uff97\047\uff97\050\uff97\051\uff97" +
    "\054\uff97\056\uff97\057\uff97\060\uff97\061\uff97\062\uff97\065" +
    "\uff97\066\uff97\067\uff97\001\002\000\104\006\uff9a\007\uff9a" +
    "\010\uff9a\011\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017" +
    "\uff9a\020\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a" +
    "\037\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047" +
    "\uff9a\050\uff9a\051\uff9a\054\uff9a\056\uff9a\057\uff9a\060\uff9a" +
    "\061\uff9a\062\uff9a\065\uff9a\066\uff9a\067\uff9a\001\002\000" +
    "\004\011\225\001\002\000\104\006\uff94\007\uff94\010\uff94" +
    "\011\uff94\013\uff94\014\uff94\015\uff94\016\uff94\017\uff94\020" +
    "\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94\037\uff94" +
    "\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94\050" +
    "\uff94\051\uff94\054\uff94\056\uff94\057\uff94\060\uff94\061\uff94" +
    "\062\uff94\065\uff94\066\uff94\067\uff94\001\002\000\104\006" +
    "\uff9b\007\uff9b\010\uff9b\011\uff9b\013\uff9b\014\uff9b\015\uff9b" +
    "\016\uff9b\017\uff9b\020\uff9b\024\uff9b\025\uff9b\026\uff9b\027" +
    "\uff9b\030\uff9b\037\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b" +
    "\046\uff9b\047\uff9b\050\uff9b\051\uff9b\054\uff9b\056\uff9b\057" +
    "\uff9b\060\221\061\216\062\214\065\223\066\217\067\215" +
    "\001\002\000\026\011\uffaf\013\uffaf\043\uffaf\044\uffaf\045" +
    "\210\046\205\047\206\050\203\051\207\054\204\001\002" +
    "\000\020\012\146\020\151\034\143\035\154\036\150\037" +
    "\112\053\153\001\002\000\012\011\uffb1\013\uffb1\043\uffb1" +
    "\044\177\001\002\000\104\006\uff98\007\uff98\010\uff98\011" +
    "\uff98\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98" +
    "\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98\037\uff98\042" +
    "\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047\uff98\050\uff98" +
    "\051\uff98\054\uff98\056\uff98\057\uff98\060\uff98\061\uff98\062" +
    "\uff98\065\uff98\066\uff98\067\uff98\001\002\000\016\012\146" +
    "\034\143\035\154\036\150\037\112\053\153\001\002\000" +
    "\060\006\uffa0\007\uffa0\010\uffa0\011\uffa0\013\uffa0\014\uffa0" +
    "\015\uffa0\016\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030" +
    "\uffa0\037\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0" +
    "\047\uffa0\050\uffa0\051\uffa0\054\uffa0\001\002\000\004\037" +
    "\013\001\002\000\104\006\uff93\007\uff93\010\uff93\011\uff93" +
    "\013\uff93\014\uff93\015\uff93\016\uff93\017\uff93\020\uff93\024" +
    "\uff93\025\uff93\026\uff93\027\uff93\030\uff93\037\uff93\042\uff93" +
    "\043\uff93\044\uff93\045\uff93\046\uff93\047\uff93\050\uff93\051" +
    "\uff93\054\uff93\056\uff93\057\uff93\060\uff93\061\uff93\062\uff93" +
    "\065\uff93\066\uff93\067\uff93\001\002\000\070\006\uff9d\007" +
    "\uff9d\010\uff9d\011\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d" +
    "\017\163\020\164\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030" +
    "\uff9d\037\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d" +
    "\047\uff9d\050\uff9d\051\uff9d\054\uff9d\056\162\057\167\001" +
    "\002\000\004\011\uffb8\001\002\000\010\011\uffb3\013\uffb3" +
    "\043\160\001\002\000\020\012\146\020\151\034\143\035" +
    "\154\036\150\037\112\053\153\001\002\000\006\011\uffb2" +
    "\013\uffb2\001\002\000\016\012\uff8b\034\uff8b\035\uff8b\036" +
    "\uff8b\037\uff8b\053\uff8b\001\002\000\016\012\uff8d\034\uff8d" +
    "\035\uff8d\036\uff8d\037\uff8d\053\uff8d\001\002\000\016\012" +
    "\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\053\uff8c\001\002" +
    "\000\016\012\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e\053" +
    "\uff8e\001\002\000\016\012\146\034\143\035\154\036\150" +
    "\037\112\053\153\001\002\000\016\012\uff8a\034\uff8a\035" +
    "\uff8a\036\uff8a\037\uff8a\053\uff8a\001\002\000\016\012\uff8f" +
    "\034\uff8f\035\uff8f\036\uff8f\037\uff8f\053\uff8f\001\002\000" +
    "\060\006\uff9c\007\uff9c\010\uff9c\011\uff9c\013\uff9c\014\uff9c" +
    "\015\uff9c\016\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030" +
    "\uff9c\037\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c" +
    "\047\uff9c\050\uff9c\051\uff9c\054\uff9c\001\002\000\106\006" +
    "\uff90\007\uff90\010\uff90\011\uff90\013\uff90\014\uff90\015\uff90" +
    "\016\uff90\017\uff90\020\uff90\023\173\024\uff90\025\uff90\026" +
    "\uff90\027\uff90\030\uff90\037\uff90\042\uff90\043\uff90\044\uff90" +
    "\045\uff90\046\uff90\047\uff90\050\uff90\051\uff90\054\uff90\056" +
    "\uff90\057\uff90\060\uff90\061\uff90\062\uff90\065\uff90\066\uff90" +
    "\067\uff90\001\002\000\020\012\146\020\151\034\143\035" +
    "\154\036\150\037\112\053\153\001\002\000\004\024\175" +
    "\001\002\000\104\006\uff91\007\uff91\010\uff91\011\uff91\013" +
    "\uff91\014\uff91\015\uff91\016\uff91\017\uff91\020\uff91\024\uff91" +
    "\025\uff91\026\uff91\027\uff91\030\uff91\037\uff91\042\uff91\043" +
    "\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91" +
    "\054\uff91\056\uff91\057\uff91\060\uff91\061\uff91\062\uff91\065" +
    "\uff91\066\uff91\067\uff91\001\002\000\060\006\uff9f\007\uff9f" +
    "\010\uff9f\011\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\024" +
    "\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\037\uff9f\042\uff9f" +
    "\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051" +
    "\uff9f\054\uff9f\001\002\000\020\012\146\020\151\034\143" +
    "\035\154\036\150\037\112\053\153\001\002\000\010\011" +
    "\uffb0\013\uffb0\043\uffb0\001\002\000\004\013\202\001\002" +
    "\000\104\006\uff92\007\uff92\010\uff92\011\uff92\013\uff92\014" +
    "\uff92\015\uff92\016\uff92\017\uff92\020\uff92\024\uff92\025\uff92" +
    "\026\uff92\027\uff92\030\uff92\037\uff92\042\uff92\043\uff92\044" +
    "\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051\uff92\054\uff92" +
    "\056\uff92\057\uff92\060\uff92\061\uff92\062\uff92\065\uff92\066" +
    "\uff92\067\uff92\001\002\000\020\012\uffa9\020\uffa9\034\uffa9" +
    "\035\uffa9\036\uffa9\037\uffa9\053\uffa9\001\002\000\020\012" +
    "\uffad\020\uffad\034\uffad\035\uffad\036\uffad\037\uffad\053\uffad" +
    "\001\002\000\020\012\uffab\020\uffab\034\uffab\035\uffab\036" +
    "\uffab\037\uffab\053\uffab\001\002\000\020\012\uffaa\020\uffaa" +
    "\034\uffaa\035\uffaa\036\uffaa\037\uffaa\053\uffaa\001\002\000" +
    "\020\012\uffa8\020\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8" +
    "\053\uffa8\001\002\000\020\012\uffac\020\uffac\034\uffac\035" +
    "\uffac\036\uffac\037\uffac\053\uffac\001\002\000\020\012\146" +
    "\020\151\034\143\035\154\036\150\037\112\053\153\001" +
    "\002\000\012\011\uffae\013\uffae\043\uffae\044\uffae\001\002" +
    "\000\016\012\uff88\034\uff88\035\uff88\036\uff88\037\uff88\053" +
    "\uff88\001\002\000\016\012\uff82\034\uff82\035\uff82\036\uff82" +
    "\037\uff82\053\uff82\001\002\000\016\012\uff85\034\uff85\035" +
    "\uff85\036\uff85\037\uff85\053\uff85\001\002\000\016\012\uff83" +
    "\034\uff83\035\uff83\036\uff83\037\uff83\053\uff83\001\002\000" +
    "\016\012\uff86\034\uff86\035\uff86\036\uff86\037\uff86\053\uff86" +
    "\001\002\000\016\012\146\034\143\035\154\036\150\037" +
    "\112\053\153\001\002\000\016\012\uff84\034\uff84\035\uff84" +
    "\036\uff84\037\uff84\053\uff84\001\002\000\016\012\uff89\034" +
    "\uff89\035\uff89\036\uff89\037\uff89\053\uff89\001\002\000\016" +
    "\012\uff87\034\uff87\035\uff87\036\uff87\037\uff87\053\uff87\001" +
    "\002\000\104\006\uff99\007\uff99\010\uff99\011\uff99\013\uff99" +
    "\014\uff99\015\uff99\016\uff99\017\uff99\020\uff99\024\uff99\025" +
    "\uff99\026\uff99\027\uff99\030\uff99\037\uff99\042\uff99\043\uff99" +
    "\044\uff99\045\uff99\046\uff99\047\uff99\050\uff99\051\uff99\054" +
    "\uff99\056\uff99\057\uff99\060\uff99\061\uff99\062\uff99\065\uff99" +
    "\066\uff99\067\uff99\001\002\000\006\013\uffb9\037\112\001" +
    "\002\000\004\013\227\001\002\000\024\006\111\007\124" +
    "\015\130\016\120\025\110\026\126\027\122\037\112\042" +
    "\133\001\002\000\004\011\231\001\002\000\032\006\uffbb" +
    "\007\uffbb\010\uffbb\011\uffbb\015\uffbb\016\uffbb\025\uffbb\026" +
    "\uffbb\027\uffbb\030\uffbb\037\uffbb\042\uffbb\001\002\000\022" +
    "\012\146\013\233\020\151\034\143\035\154\036\150\037" +
    "\112\053\153\001\002\000\104\006\uff95\007\uff95\010\uff95" +
    "\011\uff95\013\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020" +
    "\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95\037\uff95" +
    "\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95\050" +
    "\uff95\051\uff95\054\uff95\056\uff95\057\uff95\060\uff95\061\uff95" +
    "\062\uff95\065\uff95\066\uff95\067\uff95\001\002\000\004\013" +
    "\uff9e\001\002\000\006\013\uffa2\014\240\001\002\000\004" +
    "\013\237\001\002\000\104\006\uff96\007\uff96\010\uff96\011" +
    "\uff96\013\uff96\014\uff96\015\uff96\016\uff96\017\uff96\020\uff96" +
    "\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96\037\uff96\042" +
    "\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96" +
    "\051\uff96\054\uff96\056\uff96\057\uff96\060\uff96\061\uff96\062" +
    "\uff96\065\uff96\066\uff96\067\uff96\001\002\000\020\012\146" +
    "\020\151\034\143\035\154\036\150\037\112\053\153\001" +
    "\002\000\004\013\uffa1\001\002\000\020\012\146\020\151" +
    "\034\143\035\154\036\150\037\112\053\153\001\002\000" +
    "\006\013\uffbf\014\244\001\002\000\004\036\250\001\002" +
    "\000\004\013\246\001\002\000\004\011\247\001\002\000" +
    "\032\006\uffc1\007\uffc1\010\uffc1\011\uffc1\015\uffc1\016\uffc1" +
    "\025\uffc1\026\uffc1\027\uffc1\030\uffc1\037\uffc1\042\uffc1\001" +
    "\002\000\004\013\uffc0\001\002\000\004\037\112\001\002" +
    "\000\114\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013" +
    "\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\024\uffa5" +
    "\025\uffa5\026\uffa5\027\uffa5\030\uffa5\037\uffa5\040\uffa5\041" +
    "\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5" +
    "\050\uffa5\051\uffa5\052\uffa5\054\uffa5\056\uffa5\057\uffa5\060" +
    "\uffa5\061\uffa5\062\uffa5\065\uffa5\066\uffa5\067\uffa5\001\002" +
    "\000\032\006\uffcb\007\uffcb\010\uffcb\011\uffcb\015\uffcb\016" +
    "\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\037\uffcb\042\uffcb" +
    "\001\002\000\032\006\uffb5\007\uffb5\010\uffb5\011\uffb5\015" +
    "\uffb5\016\uffb5\025\uffb5\026\uffb5\027\uffb5\030\255\037\uffb5" +
    "\042\uffb5\001\002\000\024\006\111\007\124\015\130\016" +
    "\120\025\110\026\126\027\122\037\112\042\133\001\002" +
    "\000\032\006\uffb6\007\uffb6\010\uffb6\011\uffb6\015\uffb6\016" +
    "\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\037\uffb6\042\uffb6" +
    "\001\002\000\026\006\111\007\124\010\260\015\130\016" +
    "\120\025\110\026\126\027\122\037\112\042\133\001\002" +
    "\000\032\006\uffca\007\uffca\010\uffca\011\uffca\015\uffca\016" +
    "\uffca\025\uffca\026\uffca\027\uffca\030\uffca\037\uffca\042\uffca" +
    "\001\002\000\020\012\146\020\151\034\143\035\154\036" +
    "\150\037\112\053\153\001\002\000\004\013\263\001\002" +
    "\000\024\006\uffb4\007\uffb4\015\uffb4\016\uffb4\025\uffb4\026" +
    "\uffb4\027\uffb4\037\uffb4\042\uffb4\001\002\000\004\011\266" +
    "\001\002\000\032\006\uffbe\007\uffbe\010\uffbe\011\uffbe\015" +
    "\uffbe\016\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\037\uffbe" +
    "\042\uffbe\001\002\000\032\006\uffbd\007\uffbd\010\uffbd\011" +
    "\uffbd\015\uffbd\016\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd" +
    "\037\uffbd\042\uffbd\001\002\000\020\012\146\020\151\034" +
    "\143\035\154\036\150\037\112\053\153\001\002\000\004" +
    "\024\271\001\002\000\114\006\uffa3\007\uffa3\010\uffa3\011" +
    "\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3" +
    "\020\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\037" +
    "\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3" +
    "\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\054\uffa3\056" +
    "\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3\065\uffa3\066\uffa3" +
    "\067\uffa3\001\002\000\032\006\uffcc\007\uffcc\010\uffcc\011" +
    "\uffcc\015\uffcc\016\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\037\uffcc\042\uffcc\001\002\000\004\037\112\001\002\000" +
    "\004\013\275\001\002\000\004\011\276\001\002\000\032" +
    "\006\uffbc\007\uffbc\010\uffbc\011\uffbc\015\uffbc\016\uffbc\025" +
    "\uffbc\026\uffbc\027\uffbc\030\uffbc\037\uffbc\042\uffbc\001\002" +
    "\000\020\012\146\020\151\034\143\035\154\036\150\037" +
    "\112\053\153\001\002\000\034\006\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\013\uffc8\015\uffc8\016\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\037\uffc8\042\uffc8\001\002\000\034\006\uffc5" +
    "\007\uffc5\010\uffc5\011\uffc5\013\uffc5\015\uffc5\016\uffc5\025" +
    "\uffc5\026\uffc5\027\uffc5\030\uffc5\037\uffc5\042\uffc5\001\002" +
    "\000\034\006\uffc4\007\uffc4\010\uffc4\011\uffc4\013\uffc4\015" +
    "\uffc4\016\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\037\uffc4" +
    "\042\uffc4\001\002\000\022\012\146\013\uffc2\020\151\034" +
    "\143\035\154\036\150\037\112\053\153\001\002\000\004" +
    "\013\uffc3\001\002\000\004\013\306\001\002\000\034\006" +
    "\uffc6\007\uffc6\010\uffc6\011\uffc6\013\uffc6\015\uffc6\016\uffc6" +
    "\025\uffc6\026\uffc6\027\uffc6\030\uffc6\037\uffc6\042\uffc6\001" +
    "\002\000\034\006\uffc7\007\uffc7\010\uffc7\011\uffc7\013\uffc7" +
    "\015\uffc7\016\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\037" +
    "\uffc7\042\uffc7\001\002\000\010\013\uffd7\014\uffd7\023\311" +
    "\001\002\000\004\024\312\001\002\000\006\013\uffd6\014" +
    "\uffd6\001\002\000\006\003\044\037\046\001\002\000\010" +
    "\007\uffed\010\uffed\011\uffed\001\002\000\004\007\uffe8\001" +
    "\002\000\012\005\061\010\317\022\uffde\037\uffde\001\002" +
    "\000\004\002\001\001\002\000\004\011\321\001\002\000" +
    "\012\007\ufff1\031\ufff1\033\ufff1\037\ufff1\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\005\001\001\000\004\004\007\001\001\000\002" +
    "\001\001\000\014\006\013\007\016\014\014\017\015\031" +
    "\010\001\001\000\006\015\317\016\047\001\001\000\004" +
    "\005\315\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\021\001\001\000\006\010\023\011" +
    "\022\001\001\000\004\012\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\035\001\001\000\002\001" +
    "\001\000\004\012\036\001\001\000\002\001\001\000\004" +
    "\020\041\001\001\000\004\031\314\001\001\000\002\001" +
    "\001\000\010\015\046\016\047\021\044\001\001\000\002" +
    "\001\001\000\004\022\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\051\016\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\063\024\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\064\031\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\026\074\027\073\030\075\031\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\027\077\030\075\031\072\001\001\000\002\001" +
    "\001\000\006\014\101\031\010\001\001\000\002\001\001" +
    "\000\004\032\103\001\001\000\034\033\130\034\116\035" +
    "\106\036\122\037\131\040\115\041\114\042\112\043\105" +
    "\055\120\056\124\071\126\072\104\001\001\000\002\001" +
    "\001\000\006\044\277\062\276\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\043\137\057\263\071" +
    "\126\072\104\073\151\074\154\075\143\076\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\256\001\001\000\034\033\253\034\116\035\106" +
    "\036\122\037\131\040\115\041\114\042\112\043\105\055" +
    "\120\056\124\071\126\072\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\042\134\043\105" +
    "\050\135\071\126\072\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\043\137\051\141\052\155\053\156" +
    "\054\146\057\144\071\126\072\104\073\151\074\154\075" +
    "\143\076\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\066\217\067" +
    "\221\070\212\001\001\000\004\061\210\001\001\000\022" +
    "\043\137\057\200\071\126\072\104\073\151\074\154\075" +
    "\143\076\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\043\137\071\126\072\104\073\175\074\154\075" +
    "\143\076\140\001\001\000\002\001\001\000\004\031\171" +
    "\001\001\000\002\001\001\000\010\063\165\064\167\065" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\043\137\052\160\053\156\054\146\057\144\071\126\072" +
    "\104\073\151\074\154\075\143\076\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\043\137\071\126\072\104" +
    "\073\170\074\154\075\143\076\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\043\137\057\173\071\126\072\104\073\151\074" +
    "\154\075\143\076\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\043\137\053\177\054" +
    "\146\057\144\071\126\072\104\073\151\074\154\075\143" +
    "\076\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\043\137\057\211\071\126\072\104\073\151" +
    "\074\154\075\143\076\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\043\137\071\126\072" +
    "\104\076\223\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\042\134\043" +
    "\105\050\225\071\126\072\104\001\001\000\002\001\001" +
    "\000\034\033\227\034\116\035\106\036\122\037\131\040" +
    "\115\041\114\042\112\043\105\055\120\056\124\071\126" +
    "\072\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\043\137\046\235\057\234\060\233\071\126\072\104" +
    "\073\151\074\154\075\143\076\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\043\137\057\234\060\240\071" +
    "\126\072\104\073\151\074\154\075\143\076\140\001\001" +
    "\000\002\001\001\000\022\043\137\057\242\071\126\072" +
    "\104\073\151\074\154\075\143\076\140\001\001\000\004" +
    "\047\244\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\072\251\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\033\255\034\116\035\106\036\122" +
    "\037\131\040\115\041\114\042\112\043\105\055\120\056" +
    "\124\071\126\072\104\001\001\000\002\001\001\000\034" +
    "\033\130\034\116\035\106\036\122\037\131\040\115\041" +
    "\114\042\112\043\105\055\120\056\124\071\126\072\104" +
    "\001\001\000\002\001\001\000\030\043\137\052\261\053" +
    "\156\054\146\057\144\071\126\072\104\073\151\074\154" +
    "\075\143\076\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\043\137\057\267\071\126\072\104\073\151\074" +
    "\154\075\143\076\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\043\273\071\126\072" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\043\137\057\306\071\126\072\104\073" +
    "\151\074\154\075\143\076\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\043\137\045" +
    "\304\046\303\057\234\060\233\071\126\072\104\073\151" +
    "\074\154\075\143\076\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\313\016\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\063\024\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  Tab.init(); 
  

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }


	
	int printCallCount = 0;
	
	Logger log = Logger.getLogger(getClass());
   
    //REDEFINE LOGGER METHODS
    //======================================================================================
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSyntax error : ", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Error : parsing has to be stopped", cur_token);
    }

    public void report_error(String message, Object info)
      {
        System.err.print(message);
        System.err.flush();
        if (info instanceof Symbol)
                  System.err.println("Error : on line " + ((Symbol)info).left);
        else System.err.println("");
      }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


	ParserActionImplementer impl = new ParserActionImplementer() ;
	

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // MulopRight ::= ASSIGNMOD 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // MulopRight ::= ASSIGNDIV 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // MulopRight ::= ASSIGNMUL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // MulopLeft ::= MOD 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // MulopLeft ::= DIV 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // MulopLeft ::= MUL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Mulop ::= MulopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Mulop ::= MulopLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // AddopRight ::= ASSIGNMINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // AddopRight ::= ASSIGNPLUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // AddopLeft ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // AddopLeft ::= PLUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Addop ::= AddopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Addop ::= AddopLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Factor ::= NEW Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Factor ::= NEW Type LBRACK Expr RBRACK 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Factor ::= LPAREN Expr RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Factor ::= BOOL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Factor ::= CHAR 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Factor ::= Designator LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Factor ::= Designator LPAREN ActPars RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Factor ::= Designator 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Factor ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FactorList ::= FactorList Mulop Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FactorList",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FactorList ::= Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FactorList",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Term ::= FactorList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TermList ::= Term Addop TermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermList",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TermList ::= Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermList",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ActPars ::= ExprList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr ::= MINUS TermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expr ::= TermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ExprList ::= Expr COMMA ExprList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprList",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ExprList ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprList",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // IdentDecl ::= IDENT LBRACK Expr RBRACK 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentDecl",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // IdentDecl ::= IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentDecl",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // IdentList ::= IdentList DOT IdentDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // IdentList ::= IdentDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Designator ::= IdentList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Relop ::= LEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Relop ::= LT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Relop ::= GEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Relop ::= GT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Relop ::= NEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Relop ::= EQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ConditionFact ::= Expr Relop Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionFact",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ConditionFact ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionFact",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ConditionTerm ::= ConditionFact AND ConditionTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionTerm",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ConditionTerm ::= ConditionFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionTerm",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Condition ::= ConditionTerm OR Condition 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Condition ::= ConditionTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IfCondition ::= IF LPAREN Condition RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfCondition",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // IfStatement ::= IfCondition Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfStatement",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IfStatement ::= IfCondition Statement ELSE Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfStatement",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ForStatementConditionExtension ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForStatementConditionExtension",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ForStatementConditionExtension ::= Condition 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForStatementConditionExtension",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ForStatementDesignatorExtension ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForStatementDesignatorExtension",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ForStatementDesignatorExtension ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForStatementDesignatorExtension",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ForStatement ::= FOR LPAREN ForStatementDesignatorExtension SEMI ForStatementConditionExtension SEMI ForStatementDesignatorExtension RPAREN Statement SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForStatement",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ReadStatement ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReadStatement",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ReturnStatement ::= RETURN Expr SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ReturnStatement ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PrintExtension ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("PrintExtension",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PrintExtension ::= COMMA NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("PrintExtension",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PrintStatement ::= PRINT LPAREN Expr PrintExtension RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("PrintStatement",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DesignatorActParsOptional ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorActParsOptional",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DesignatorActParsOptional ::= ActPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorActParsOptional",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DesignatorExtension ::= DEC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorExtension",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DesignatorExtension ::= INC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorExtension",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DesignatorExtension ::= LPAREN DesignatorActParsOptional RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorExtension",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DesignatorExtension ::= Assignop Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorExtension",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DesignatorStatement ::= Designator DesignatorExtension 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object des = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // StatementUnmatched ::= IfStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // StatementUnmatched ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // StatementMatched ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // StatementMatched ::= CONTINUE SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // StatementMatched ::= ReadStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // StatementMatched ::= ReturnStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // StatementMatched ::= PrintStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // StatementMatched ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // StatementMatched ::= ForStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Statement ::= StatementUnmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Statement ::= StatementMatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FormalParamDecl ::= Type IDENT LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FormalParamDecl ::= Type IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FormalParamList ::= FormalParamDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FormalParamList ::= FormalParamDecl COMMA FormalParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FormPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FormPars ::= FormalParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MethodReturnType ::= VOID IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodReturnType",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MethodReturnType ::= Type IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodReturnType",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MethodStatic ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodStatic",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MethodStatic ::= STATIC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodStatic",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MethodDecl ::= MethodStatic MethodReturnType LPAREN FormPars RPAREN VarDecl LBRACE StatementList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MethodList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MethodList ::= MethodList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassMethodList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassMethodList ::= LBRACE MethodList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassVarDecl ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDecl",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassVarDecl ::= VarList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDecl",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassExtended ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassExtended",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ClassExtended ::= EXTENDS Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassExtended",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ClassDecl ::= CLASS IDENT ClassExtended LBRACE ClassVarDecl ClassMethodList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type ::= IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Var ::= IDENT LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Var ::= IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarList ::= error COMMA VarList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarList ::= error 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarList ::= Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VarList ::= Var COMMA VarList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarDecl ::= Type VarList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstType ::= BOOL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstType",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstType ::= CHAR 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstType",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstType ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstType",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Constant ::= IDENT EQ ConstType 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstAdditionalList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstAdditionalList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstAdditionalList ::= COMMA Constant ConstAdditionalList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstAdditionalList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstList ::= Constant ConstAdditionalList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ConstDecl ::= CONST Type ConstList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GlobalParameterType ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalParameterType",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalParameterType ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalParameterType",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GlobalParameterType ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalParameterType",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GlobalParameterList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalParameterList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // GlobalParameterList ::= GlobalParameterList GlobalParameterType 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalParameterList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramName ::= IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramName",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG ProgramName GlobalParameterList LBRACE MethodList RBRACE 
            {
              Object RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object pName = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

